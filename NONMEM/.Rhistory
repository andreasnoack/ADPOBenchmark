cum_area <- cum_area + p/201
}
}
data <- cbind(vals,ps)
library(plotly)
plot_ly(
data, x= ~i, y= ~n, z= ~p,
type='mesh3d',
colors= colorRamp(rainbow(1))
)
# box cox
library(ggplot2)
library(MASS)
dat <-  data.frame("Y"= runif(1000,0,3))
ggplot(dat,aes(x=Y))+geom_histogram()
dat <-  data.frame("Y"= exp(rnorm(1000,0,3)))
ggplot(dat,aes(x=Y))+geom_histogram()
?rnorm
library(mvtnorm)
?mvrnorm
dat <-  data.frame("Y"= exp(rnorm(1000,0,0.1)))
ggplot(dat,aes(x=Y))+geom_histogram()
dat <-  data.frame("Y"= exp(rnorm(1000,0,0.2)))
dat <-  data.frame("Y"= exp(rnorm(1000,log(100),0.2)))
ggplot(dat,aes(x=Y))+geom_histogram()
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.02,0.5),nrow = 3)
Sigma
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.05,0.5),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame("Y"= exp(mvrnorm(1000,mu,Sigma)
dat <-  data.frame("Y"= exp(mvrnorm(1000,mu,Sigma)))
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.05,0.5),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame("Y"= exp(mvrnorm(1000,mu,Sigma)))
ggplot(dat,aes(x=Y))+geom_histogram()
dat <-  exp(mvrnorm(1000,mu,Sigma))
View(dat)
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
library(MASS)
y = rf(500,30,30)
hist(y,breaks = 12)
?rf
result = boxcox(y~1, lambda = seq(-5,5,0.5))
mylambda = result$x[which.max(result$y)]
mylambda
y2 = (y^mylambda-1)/mylambda
hist(y2)
?boxcox
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
mylambda = result$x[which.max(LambaV$y)]
myLambda
mylambda
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <-  (dat$V^lambdaV-1)/lambdaV
hist(NormV)
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV
lambdaV
library(mvtnorm)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
ggplot(NormV,aes(x=V))+geom_histogram()
# and back to untransformed
NewV <- (NormV*lambdaV+1)^(1/lambdaV)
plot(V,NewV)
plot(dat$V,NewV)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
ggplot(NormV,aes(x=V))+geom_histogram()
# and back to untransformed
NewV <- (NormV*lambdaV+1)^(1/lambdaV)
plot(dat$V,NewV)
dat$V
NewV
View(dat)
orgV <- dat$V
plot(orgV,NewV)
plot(dat$V,NewV$V)
dat$V == newV$V
dat$V == NewV$V
View(dat)
View(NewV)
dat$V - NewV$V
any(abs(dat$V - NewV$V) > 0.0000001)
max(abs(dat$V - NewV$V))
# box cox
library(ggplot2)
library(MASS)
library(mvtnorm)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
shapiro.test(NormV$V)
88*47
88*48
12*48
home_dir
home_dir <- "c:/git/dual_numbers/"
#
rm(list=ls())
library(dplyr)
library(readr)
library(tictoc)
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
home_dir <- "c:/git/dual_numbers"
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
destFile
nonmem_control
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_control
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
nlme_destination_dir
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
Curr_model
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
}
}
}
}
toc()
rm(list=ls())
library(xml2)
library(dplyr)
library(purrr)
library(MASS)
library(readr)
library(stringr)
library(matrixcalc)
nSamples <- 100
set.seed(1)
nResamples <- 10
source("c:/git/sir/utils.r")
home_dir <- "c:/git/sir"
setwd(home_dir)
# get bound for THETA
xml_file <- file.path(home_dir,"NONMEM","1","run1.xml")
org_results <- ReadXML(xml_file)
mu <- c(org_results$theta,
org_results$omega[lower.tri(org_results$omega, diag=TRUE)],
org_results$sigma[lower.tri(org_results$sigma,diag=TRUE)])
parms <- data.frame(mvrnorm(nSamples,mu,org_results$cov))
# eliminate those with THETA out of bounds
# need to fileter org_Results the same
new_org_results <- org_results
parms <- parms %>%
filter(X1>=org_results$theta_lbound[1]) %>%
filter(X2>=org_results$theta_lbound[2]) %>%
filter(X3>=org_results$theta_lbound[3]) %>%
filter(X1<=org_results$theta_ubound[1]) %>%
filter(X2<=org_results$theta_ubound[2]) %>%
filter(X3<=org_results$theta_ubound[3])
# eliminate those with non-positive definate omega, negative diagonal omega and negative sigma
omega_vals <- parms[,((org_results$ntheta+1):(org_results$ntheta+org_results$nOmegaVals))]
IndicesNPD  <- GetPosDev(omega_vals, org_results$omega_dim)
IndicesNPD
org_results
parms <- data.frame(mvrnorm(nSamples,mu,org_results$cov))
new_org_results <- org_results
parms <- parms %>%
filter(X1>=org_results$theta_lbound[1]) %>%
filter(X2>=org_results$theta_lbound[2]) %>%
filter(X3>=org_results$theta_lbound[3]) %>%
filter(X1<=org_results$theta_ubound[1]) %>%
filter(X2<=org_results$theta_ubound[2]) %>%
filter(X3<=org_results$theta_ubound[3])
parms <- parms %>%
filter(X1>=org_results$theta_lbound[1]) %>%
filter(X2>=org_results$theta_lbound[2]) %>%
filter(X3>=org_results$theta_lbound[3]) %>%
filter(X1<=org_results$theta_ubound[1]) %>%
filter(X2<=org_results$theta_ubound[2]) %>%
filter(X3<=org_results$theta_ubound[3])
# eliminate those with non-positive definate omega, negative diagonal omega and negative sigma
omega_vals <- parms[,((org_results$ntheta+1):(org_results$ntheta+org_results$nOmegaVals))]
IndicesNPD  <- GetPosDev(omega_vals, org_results$omega_dim)
parms <- parms[IndicesNPD,]
parms <- data.frame(mvrnorm(nSamples,mu,org_results$cov))
parms <- parms %>%
filter(X1>=org_results$theta_lbound[1]) %>%
filter(X2>=org_results$theta_lbound[2]) %>%
filter(X3>=org_results$theta_lbound[3]) %>%
filter(X1<=org_results$theta_ubound[1]) %>%
filter(X2<=org_results$theta_ubound[2]) %>%
filter(X3<=org_results$theta_ubound[3])
# eliminate those with non-positive definate omega, negative diagonal omega and negative sigma
omega_vals <- parms[,((org_results$ntheta+1):(org_results$ntheta+org_results$nOmegaVals))]
IndicesNPD  <- GetPosDev(omega_vals, org_results$omega_dim)
parms <- parms[IndicesNPD,]
if(org_results$sigma_dim > 1){
sigma_vals <- parms[,((1+org_results$ntheta+org_results$nOmegaVals):
(org_results$ntheta+org_results$nOmegaVals+org_results$nSigmaVals))]
IndicesNPD  <- GetPosDev(sigma_vals, org_results$sigma_dim)
} else{
IndicesNPD <- parms[,org_results$ntheta+org_results$nOmegaVals+org_results$nSigmaVals] > 0
}
parms <- parms[IndicesNPD,]
# rewrite control file
control <- readr::read_file(file.path(home_dir,"nonmem","1","run1.mod"))
control <- str_split(control,"\n") %>% unlist()
# remove all after $EST
lastline <- grep("^\\$THETA", control)
control <- control[1:(lastline-1)]
if(!file.exists(file.path(home_dir,"NONMEMSamples"))){
dir.create(file.path(home_dir,"NONMEMSamples"))
}
SampleOFVs <- NULL
data_file <- str_trim(str_replace(control[grep("^\\$DATA",control)],"\\$DATA",""))
nSamples <- dim(parms)[1]
this_model  <- 1
this_model  <- 1
new_control <- c(control,"$THETA")
for(i in 1:org_results$ntheta){
new_control <- c(new_control,parms[this_model,i])
}
new_control <- c(new_control,paste0("$OMEGA BLOCK(", org_results$omega_dim,")"))
cur_omega_val <- org_results$ntheta
for(i in 1:org_results$omega_dim){
row <- ""
for(n in 1:i){
cur_omega_val <- cur_omega_val + 1
row <- paste(row,as.numeric(parms[this_model,cur_omega_val]))
}
new_control <- c(new_control,row)
}
new_control <- c(new_control,"$SIGMA")
for(i in 1:org_results$sigma_dim){
new_control <- c(new_control,parms[this_model,i+org_results$ntheta+org_results$nOmegaVals])
}
new_control <- c(new_control,"$EST METH=COND INTER MAX=0")
if(!file.exists(file.path(home_dir,"NONMEMSamples",this_model))){
dir.create(file.path(home_dir,"NONMEMSamples",this_model))
}
setwd(file.path(home_dir,"NONMEMSamples",this_model))
write_lines(new_control,file=paste0("Run",this_model,".mod"))
command <- paste("nmfe75", paste0("Run",this_model,".mod"),
paste0("Run",this_model,".lst"))
file.copy(file.path(home_dir,"NONMEM",1,data_file),
file.path(home_dir,"NONMEMSamples",this_model))
shell(command)
file.copy(file.path(home_dir,"NONMEM",1,data_file),
file.path(home_dir,"NONMEMSamples",this_model,data_file))
if(file.exist(file.path(home_dir,"NONMEMSamples",this_model,data_file))){
file.remove(file.path(home_dir,"NONMEMSamples",this_model,data_file))
}
if(file.exists(file.path(home_dir,"NONMEMSamples",this_model,data_file))){
file.remove(file.path(home_dir,"NONMEMSamples",this_model,data_file))
}
file.copy(file.path(home_dir,"NONMEM",1,data_file),
file.path(home_dir,"NONMEMSamples",this_model,data_file))
shell(command)
# get OFV
xml_file <- file.path(home_dir,"NONMEMSamples",this_model,paste0("run",this_model,".xml"))
SampleOFVs <- c(SampleOFVs, getOFV(xml_file))
SampleOFVs
debugSource("C:/git/sir/utils.R", echo=TRUE)
IRs <- CalcIRS(org_results$OFV,SampleOFVs,parms,mu,org_results$cov)
mu
x
x_minus_mu <- x-mu
x_minus_mu <- x-mu
x_minus_mu
tx_min_mu <- t(x_minus_mu)
Ainv
Ainv
debugSource("C:/git/sir/utils.R", echo=TRUE)
IRs <- CalcIRS(org_results$OFV,SampleOFVs,parms,mu,org_results$cov)
x_minus_mu %*% Ainv
x_minus_mu
class(x_minus_mu)
class(Ainv)
class(matrix(x_minus_mu))
class(matrix(x_minus_mu)) -> xmu
class xmu
matrix(x_minus_mu) -> xmu
class(xmu)
xmu %*% Ainv
class(xmu)
class(Ainv)
? %*%
?%*%
?"%*%"
x_minus_mu
debugSource("C:/git/sir/utils.R", echo=TRUE)
IRs <- CalcIRS(org_results$OFV,SampleOFVs,parms,mu,org_results$cov)
class(x_minus_mu)
x_minus_mu <- as.matrix(x-mu)
tx_min_mu <- t(x_minus_mu)
Ainv <- solve(as.matrix(A))
x_minus_mu %*% Ainv
setwd("c:/git/dual_numbers/"
)
rm(list=ls())
home_dir <- getwd()
library(data.table)
library(stringr)
library(xml2)
library(ggplot2)
library(dplyr)
# run all models for time, reboot computer first
setwd(file.path(home_dir,"NONMEM"))
setwd("c:/git/dual_numbers/compileresults")
home_dir <- getwd()
library(data.table)
library(stringr)
library(xml2)
library(ggplot2)
library(dplyr)
# run all models for time, reboot computer first
setwd(file.path(home_dir,"NONMEM"))
source(file.path(home_dir,"NONMEm","GetNPDENONMEM.R"))
source(file.path(home_dir,"NONMEm","CleanUp.R"))
CompNTHETA <- c(0,2,4)
VWTNTHETA <- c(0,1)
GAMMANTHETA <- c(0,1)
ETANOMEGA <- c(1,2,3,4,3,6)
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
crash= as.logical(),
NPDECmaxMean = as.numeric(),
NPDECmaxSD = as.numeric(),
NPDECminMean = as.numeric(),
NPDECminSD = as.numeric(),
SimRunTime = as.numeric()
)
for(i in 1:72){
dir <- file.path("c:/git/dual_numbers/compiler/nonmem/i")
CleanUp(dir)
}
i <-  1
dir <- file.path("c:/git/dual_numbers/compileresults/nonmem/",i)
dir
dir <- file.path("c:/git/dual_numbers/compileresults/nonmem",i)
dir
CleanUp(dir)
i <-  72
dir <- file.path("c:/git/dual_numbers/compileresults/nonmem",i)
CleanUp(dir)
for(i in 1:72){
dir <- file.path("c:/git/dual_numbers/compileresults/nonmem",i)
CleanUp(dir)
}
#
rm(list=ls())
library(dplyr)
library(readr)
library(tictoc)
tic()
#source("c:/git/dual_numbers/data/CleanUp.r")
LLOQ <- 0.1
home_dir <- "c:/git/dual_numbers"
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
}
}
}
}
