shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <-  (dat$V^lambdaV-1)/lambdaV
hist(NormV)
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV
lambdaV
library(mvtnorm)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
ggplot(NormV,aes(x=V))+geom_histogram()
# and back to untransformed
NewV <- (NormV*lambdaV+1)^(1/lambdaV)
plot(V,NewV)
plot(dat$V,NewV)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
ggplot(NormV,aes(x=V))+geom_histogram()
# and back to untransformed
NewV <- (NormV*lambdaV+1)^(1/lambdaV)
plot(dat$V,NewV)
dat$V
NewV
View(dat)
orgV <- dat$V
plot(orgV,NewV)
plot(dat$V,NewV$V)
dat$V == newV$V
dat$V == NewV$V
View(dat)
View(NewV)
dat$V - NewV$V
any(abs(dat$V - NewV$V) > 0.0000001)
max(abs(dat$V - NewV$V))
# box cox
library(ggplot2)
library(MASS)
library(mvtnorm)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
shapiro.test(NormV$V)
88*47
88*48
12*48
home_dir
home_dir <- "c:/git/dual_numbers/"
#
rm(list=ls())
library(dplyr)
library(readr)
library(tictoc)
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
home_dir <- "c:/git/dual_numbers"
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
destFile
nonmem_control
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_control
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
nlme_destination_dir
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
Curr_model
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
}
}
}
}
toc()
setwd("c:/git/dual_numbers")
)
setwd("c:/git/dual_numbers")
setwd("c:/git/dual_numbers/compileresults")
rm(list=ls())
home_dir <- getwd()
library(data.table)
library(stringr)
library(xml2)
library(ggplot2)
library(dplyr)
# run all models for time, reboot computer first
setwd(file.path(home_dir,"NONMEM"))
source(file.path(home_dir,"NONMEm","GetNPDENONMEM.R"))
source(file.path(home_dir,"NONMEm","CleanUp.R"))
CompNTHETA <- c(0,2,4)
VWTNTHETA <- c(0,1)
GAMMANTHETA <- c(0,1)
ETANOMEGA <- c(1,2,3,4,3,6)
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
crash= as.logical(),
NPDECmaxMean = as.numeric(),
NPDECmaxSD = as.numeric(),
NPDECminMean = as.numeric(),
NPDECminSD = as.numeric(),
SimRunTime = as.numeric()
)
# start at last model
Curr_model <- 0
#Start_model <- dim(Results)[1]
Start_model <- 70#dim(Results)[1]
nsamp <- 200
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
StartTime <-  Sys.time()
if(Curr_model > Start_model){
tryCatch(
{
message("############ Starting model ", Curr_model, " at ", strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ," ############")
Est_time <- Cov_time <- iterations <-  messages <- -99999
Covar <- success <- FALSE
wd <- file.path(home_dir,"NONMEM", Curr_model)
setwd(wd)
filenameStem <- paste0("Run",Curr_model)
command <- paste0("nmfe75 ", paste0(filenameStem,".mod "), paste0(filenameStem,".lst"))
StartTime <-  Sys.time()
shell(command)
xml_file <- file.path(wd,paste0(filenameStem,".xml"))
data <- ""
data <- read_xml(xml_file, encoding = "ASCII")
control_node <- data %>%
xml_find_all("//nm:control_stream") %>%
xml_text()  %>%
str_split("\n")
data_file <- control_node[[1]][grep("^\\$DATA",control_node[[1]])] %>%
str_replace("\\$DATA ","") %>%
str_replace("IGNORE\\=@","") %>%
str_trim()
iterations_node <- xml_find_all(data, "//nm:monitor")
iterations_children <- xml_children(iterations_node)[[2]]
iterations <- as.integer(xml_attr(iterations_children,"iteration"))
messages_node <- xml_find_all(data, "//nm:termination_txtmsg")
messages_children <- xml_children(messages_node)
message_contents <- xml_contents(messages_node)
messages <- as.numeric(xml_text(message_contents))
if(length(xml_contents(messages_node)) == 0){
finished <- FALSE
}else{
finished <- TRUE
}
if(37 %in% messages){
success <- TRUE
}else{
success <- FALSE
}
message_char <- paste(messages, collapse = "|")
status <- data %>%
xml_find_all("//nm:termination_status") %>%
xml_text() %>%
as.numeric()
Est_time <- data %>%
xml_find_all("//nm:estimation_elapsed_time") %>%
xml_text() %>%
as.numeric()
Cov_time <- data %>%
xml_find_all("//nm:covariance_elapsed_time") %>%
xml_text() %>%
as.numeric()
covariance_node <- xml_find_all(data, "//nm:covariance")
if (length(covariance_node) == 0) {
Covar <- FALSE
}else{
Covar <- TRUE
}
message("############ Starting NPDE for model ", Curr_model, " at ", strptime(Sys.time(), format = "%Y-%m-%d %H:%M"), " ############")
NPDEResults <- GetNPDE(wd, Curr_model, nsamp)
},
error = function(e){
Run_time <- 9999999
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- -99999
message_char <- "-99999"
NPDEResults <-list(
model = -999,
NPDECmaxMean = -999,
NPDECmaxSD = -999,
NPDECminMean = -999,
NPDECminSD = -999,
NPDETime = -999
)
}
)
EndTime <- as.ITime(Sys.time())
NTHETA <- 4 + CompNTHETA[this_comp+1] + VWTNTHETA[this_vwt+1] + GAMMANTHETA[this_gamma+1]
NOMEGA <- ETANOMEGA[this_eta+1]
This_Result = data.frame(
StartTime = as.character(StartTime),
EndTime = as.character(EndTime),
Model_num = Curr_model,
this_comp = this_comp,
this_eta = this_eta,
this_vwt = this_vwt,
this_gamma = this_gamma,
n_theta = NTHETA,
n_omega = NOMEGA,
Est_time = Est_time,
Cov_time = Cov_time,
Success = success,
Covar = Covar,
Iterations = iterations,
Algorithm = "NONMEM",
Good_inits = TRUE,
log_path = xml_file,
control_file = paste0(filenameStem, ".mod "),
data_set = data_file,
nparms = NTHETA + NOMEGA ,
messages = paste(messages, collapse = "-"),
crash = FALSE,
NPDECmaxMean = NPDEResults$CmaxMean,
NPDECmaxSD = NPDEResults$CmaxSD,
NPDECminMean = NPDEResults$CminMean,
NPDECminSD = NPDEResults$CminSD,
SimRunTime = NPDEResults$NPDETime
)
Results <- rbind(Results, This_Result)
save(Results, file = file.path(home_dir,"NONMEMResults.RData"))
write.csv(Results,file.path(home_dir,"NONMEMResults.csv"), quote= FALSE, row.names = FALSE)
CleanUp(getwd())
}else{
message("Skipping model ",Curr_model," already run at ", Results$EndTime[Curr_model])
}
}
}
}
}
# start at last model
Curr_model <- 0
Start_model <- dim(Results)[1]
rm(list=ls())
home_dir <- getwd()
library(data.table)
library(stringr)
library(xml2)
library(ggplot2)
library(dplyr)
# run all models for time, reboot computer first
setwd(file.path(home_dir,"NONMEM"))
setwd('..')
setwd('..')
rm(list=ls())
home_dir <- getwd()
library(data.table)
library(stringr)
library(xml2)
library(ggplot2)
library(dplyr)
# run all models for time, reboot computer first
setwd(file.path(home_dir,"NONMEM"))
source(file.path(home_dir,"NONMEm","GetNPDENONMEM.R"))
source(file.path(home_dir,"NONMEm","CleanUp.R"))
CompNTHETA <- c(0,2,4)
VWTNTHETA <- c(0,1)
GAMMANTHETA <- c(0,1)
ETANOMEGA <- c(1,2,3,4,3,6)
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
crash= as.logical(),
NPDECmaxMean = as.numeric(),
NPDECmaxSD = as.numeric(),
NPDECminMean = as.numeric(),
NPDECminSD = as.numeric(),
SimRunTime = as.numeric()
)
# start at last model
Curr_model <- 0
Start_model <- dim(Results)[1]
nsamp <- 200
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
StartTime <-  Sys.time()
if(Curr_model > Start_model){
tryCatch(
{
message("############ Starting model ", Curr_model, " at ", strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ," ############")
Est_time <- Cov_time <- iterations <-  messages <- -99999
Covar <- success <- FALSE
wd <- file.path(home_dir,"NONMEM", Curr_model)
setwd(wd)
filenameStem <- paste0("Run",Curr_model)
command <- paste0("nmfe75 ", paste0(filenameStem,".mod "), paste0(filenameStem,".lst"))
StartTime <-  Sys.time()
shell(command)
xml_file <- file.path(wd,paste0(filenameStem,".xml"))
data <- ""
data <- read_xml(xml_file, encoding = "ASCII")
control_node <- data %>%
xml_find_all("//nm:control_stream") %>%
xml_text()  %>%
str_split("\n")
data_file <- control_node[[1]][grep("^\\$DATA",control_node[[1]])] %>%
str_replace("\\$DATA ","") %>%
str_replace("IGNORE\\=@","") %>%
str_trim()
iterations_node <- xml_find_all(data, "//nm:monitor")
iterations_children <- xml_children(iterations_node)[[2]]
iterations <- as.integer(xml_attr(iterations_children,"iteration"))
messages_node <- xml_find_all(data, "//nm:termination_txtmsg")
messages_children <- xml_children(messages_node)
message_contents <- xml_contents(messages_node)
messages <- as.numeric(xml_text(message_contents))
if(length(xml_contents(messages_node)) == 0){
finished <- FALSE
}else{
finished <- TRUE
}
if(37 %in% messages){
success <- TRUE
}else{
success <- FALSE
}
message_char <- paste(messages, collapse = "|")
status <- data %>%
xml_find_all("//nm:termination_status") %>%
xml_text() %>%
as.numeric()
Est_time <- data %>%
xml_find_all("//nm:estimation_elapsed_time") %>%
xml_text() %>%
as.numeric()
Cov_time <- data %>%
xml_find_all("//nm:covariance_elapsed_time") %>%
xml_text() %>%
as.numeric()
covariance_node <- xml_find_all(data, "//nm:covariance")
if (length(covariance_node) == 0) {
Covar <- FALSE
}else{
Covar <- TRUE
}
message("############ Starting NPDE for model ", Curr_model, " at ", strptime(Sys.time(), format = "%Y-%m-%d %H:%M"), " ############")
NPDEResults <- GetNPDE(wd, Curr_model, nsamp)
},
error = function(e){
Run_time <- 9999999
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- -99999
message_char <- "-99999"
NPDEResults <-list(
model = -999,
NPDECmaxMean = -999,
NPDECmaxSD = -999,
NPDECminMean = -999,
NPDECminSD = -999,
NPDETime = -999
)
}
)
EndTime <- as.ITime(Sys.time())
NTHETA <- 4 + CompNTHETA[this_comp+1] + VWTNTHETA[this_vwt+1] + GAMMANTHETA[this_gamma+1]
NOMEGA <- ETANOMEGA[this_eta+1]
This_Result = data.frame(
StartTime = as.character(StartTime),
EndTime = as.character(EndTime),
Model_num = Curr_model,
this_comp = this_comp,
this_eta = this_eta,
this_vwt = this_vwt,
this_gamma = this_gamma,
n_theta = NTHETA,
n_omega = NOMEGA,
Est_time = Est_time,
Cov_time = Cov_time,
Success = success,
Covar = Covar,
Iterations = iterations,
Algorithm = "NONMEM",
Good_inits = TRUE,
log_path = xml_file,
control_file = paste0(filenameStem, ".mod "),
data_set = data_file,
nparms = NTHETA + NOMEGA ,
messages = paste(messages, collapse = "-"),
crash = FALSE,
NPDECmaxMean = NPDEResults$CmaxMean,
NPDECmaxSD = NPDEResults$CmaxSD,
NPDECminMean = NPDEResults$CminMean,
NPDECminSD = NPDEResults$CminSD,
SimRunTime = NPDEResults$NPDETime
)
Results <- rbind(Results, This_Result)
save(Results, file = file.path(home_dir,"NONMEMResults.RData"))
write.csv(Results,file.path(home_dir,"NONMEMResults.csv"), quote= FALSE, row.names = FALSE)
CleanUp(getwd())
}else{
message("Skipping model ",Curr_model," already run at ", Results$EndTime[Curr_model])
}
}
}
}
}
