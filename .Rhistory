Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
TVVmax = as.numeric(),
TVKM = as.numeric(),
TVV = as.numeric(),
TVKA = as.numeric(),
CVVmax = as.numeric(),
RMSE = as.numeric(),
MAE = as.numeric(),
crash = as.logical()
)
Curr_model <- 0
Start_model <- 0
nsamp <- 200
# set all models/data sets to initial values
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model
Curr_model = 36
#for(this_gamma in 0:1){
for(this_gamma in 1:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
if(Curr_model >= Start_model){
tryCatch(
{
message("############ Starting model ", Curr_model , " at ", strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ," ############")
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE=-99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
setwd(wd)
filenameStem <- paste0("Run",Curr_model)
xml_file <- file.path(wd, paste0(filenameStem,".xml"))
if(file.exists(xml_file)){file.remove(xml_file)}
command <- paste0("nmfe74 ", paste0(filenameStem,".mod "), paste0(filenameStem,".lst"))
StartTime <- Sys.time() # as.ITime(Sys.time())
rval <- system(command, timeout = 3600*6)
# can't tell if timeout or crashed??
if(file.exists(xml_file)){
parms <- GetNMParms(xml_file)
data_file <- parms$dataFile
iterations <- parms$iterations
messages <- parms$messages
success <- parms$success
Covar <- parms$covar
NTHETA <- length(parms$theta)
if(rval != 124){ # return code for timeout
Est_time <-  parms$EstTime
Cov_time <- parms$CovTime
}else{
Est_time <-  3600*6
Cov_time <- -999                    }
TVVmax <- as.numeric(parms$theta[1])
TVKM <- as.numeric(parms$theta[2])
TVV <- as.numeric(parms$theta[3])
TVKA <-as.numeric(parms$theta[4])
CVVmax <- sqrt(parms$omega[1])
data <- read.table(file.path(wd,"Run1Preds.dat"),skip = 1, header = TRUE) %>%
filter(TIME > 0) %>%
mutate(IPRED = log(IPRED), DV = log(DV))
# log to get proportional
RMSE = rmse(data$DV, data$IPRED)
MAE = mae(data$DV, data$IPRED)
message("############ Estimation time for ", wd , " = ",
Est_time," seconds ############")
}else{
Run_time <- 9999999
if(rval == 124){
Est_time <- Cov_time <-  6*3600
}else{
Est_time <- (Sys.time()-StartTime)
Cov_time <-  -9999
}
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
message_char <- "-99999"
}
},
error = function(e){
Run_time <- 9999999
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
if(rval == 124){
message_char <- "timed out"
}else{
message_char <- "-99999"
}
}
)
EndTime <- Sys.time()
CleanUp(getwd())
NOMEGA <- ETANOMEGA[this_eta+1]
This_Result = data.frame(
StartTime = as.character(StartTime),
EndTime = as.character(EndTime),
Model_num = Curr_model,
this_comp = this_comp,
this_eta = this_eta,
this_vwt = this_vwt,
this_gamma = this_gamma,
n_theta = NTHETA,
n_omega = NOMEGA,
Est_time = Est_time,
Cov_time = Cov_time,
Success = success,
Covar = Covar,
Iterations = iterations,
Algorithm = "NONMEM",
Good_inits = TRUE,
log_path = xml_file,
control_file = file.path(home_dir,"","NONMEM",Curr_model,paste0("Run",Curr_model,".mod ")),
data_set = data_file,
nparms = NTHETA + NOMEGA ,
messages = paste(messages, collapse = "-"),
TVVmax = TVVmax,
TVKM = TVKM,
TVV = TVV,
TVKA = TVKA,
CVVmax = CVVmax,
RMSE = RMSE,
MAE = MAE,
crash = FALSE
)
Results <- rbind(Results, This_Result)
write.csv(Results,file.path(home_dir,"NONMEMResults.csv"), quote= FALSE, row.names = FALSE)
try({
file.copy("NONMEMResults.csv","NONMEMResults_bak.csv")
})
}
}
}
}
}
rm(list=ls())
home_dir <- getwd()
library(Metrics)
library(ggplot2)
library(readr)
library(stringr)
library(dplyr)
library(Certara.RsNLME)
library(data.table)
library(lubridate)
source(file.path(home_dir,"make_data.R"))
source(file.path(home_dir,"check_data.R"))
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"CopyNONMEMControls.R"))
source(file.path(home_dir,"CopyNLMEControls.R"))
# setwd(file.path(home_dir,"pydarwin_nonmem"))
# change folder in options to d:
# and data file in template
# shell("python -m darwin.run_search_in_folder .")
# setwd(file.path(home_dir,"pydarwin_nlme"))
# change folder in options to d:
# shell("python -m darwin.run_search_in_folder .")
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
# CopyNONMEMControls(home_dir)
# CopyNLMEControls(home_dir)
for(i in 1:72){
check_data(home_dir,i)
}
debugSource("D:/git/ADPOBenchmark/CompileResultsNLME.R")
?if_else
>id
?if
?if
debugSource("D:/git/ADPOBenchmark/CompileResultsNLME.R")
debugSource("D:/git/ADPOBenchmark/CompileResultsNLME.R")
debugSource("D:/git/ADPOBenchmark/CompileResultsNLME.R")
run_nlme(home_dir,"NoHessian")
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- 0
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
StartTime <- Sys.time()
runOk <- TRUE
setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(home_dir, "nlme",
Curr_model, paste0("run",Curr_model,".mmdl")))
model_meta <- create_model_from_metamodel(file.path(home_dir, "nlme",
Curr_model, paste0("run",Curr_model,".mmdl")))
model_meta <- create_model_from_metamodel(file.path(home_dir, "nlme",
Curr_model, paste0("run",Curr_model,".mmdl")))
model_orig <- model_meta$model
message("############ Running ",model_orig@modelInfo@workingDir, " at ",
format(Sys.time(), format = "%F %R %Z") , " ############")
message("############ Running ",model_orig@modelInfo@workingDir, " at ",
format(Sys.time(), format = "%F %R %Z") , " with ",which_version," ############")
modelNum <- str_sub(rev(setdiff(strsplit(model_orig@modelInfo@workingDir,"/|\\\\")[[1]], ""))[1],
start= 0)
if(file.exists(file.path(model_orig@modelInfo@workingDir,"err2.txt"))){
file.remove(file.path(model_orig@modelInfo@workingDir,"err2.txt"))
}
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)},
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)
Sys.setenv("NLME_HASH" = 1770978959)
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)
Sys.setenv("NLME_HASH" = 1770978959)
Sys.getenv("NLME_HASH")
debugSource("D:/git/ADPOBenchmark/CompileResultsNLME.R")
run_nlme(home_dir,"standard")
run_nlme(home_dir,"NoHessian")
run_nlme(home_dir,"standard")
debugSource("D:/git/ADPOBenchmark/CompileResultsNLME.R")
run_nlme(home_dir,"NoHessian")
Sys.setenv("INSTALLDIR" = "c:/Program Files/Certara/NLME_Engine")
Sys.getenv("INSTALLDIR")
installationDirectory
installationDirectory <- "C:/Program Files/Certara/NLME_Engine_noHessian"
outputfilename <-  "NLMEResults_NoHessian.csv"
Sys.getenv("NLME_HASH")
Sys.setenv("NLME_HASH" =  1770978959)
installationDirectory <- "C:/Program Files/Certara/NLME_Engine_noHessian"
outputfilename <-  "NLMEResults_NoHessian.csv"
Sys.setenv("INSTALLDIR" = "c:/Program Files/Certara/NLME_Engine_noHessian")
backupfilename <-  "NLMEResults_NoHessianBAK.csv"
syngrads <- FALSE
installationDirectory
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)
setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(home_dir, "nlme",
Curr_model, paste0("run",Curr_model,".mmdl")))
Curr_model <- 1
StartTime <- Sys.time()
runOk <- TRUE
setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(home_dir, "nlme",
Curr_model, paste0("run",Curr_model,".mmdl")))
model_orig <- model_meta$model
message("############ Running ",model_orig@modelInfo@workingDir, " at ",
format(Sys.time(), format = "%F %R %Z") , " with ",which_version," ############")
which_version = "NoHessian"
message("############ Running ",model_orig@modelInfo@workingDir, " at ",
format(Sys.time(), format = "%F %R %Z") , " with ",which_version," ############")
modelNum <- str_sub(rev(setdiff(strsplit(model_orig@modelInfo@workingDir,"/|\\\\")[[1]], ""))[1],
start= 0)
if(file.exists(file.path(model_orig@modelInfo@workingDir,"err2.txt"))){
file.remove(file.path(model_orig@modelInfo@workingDir,"err2.txt"))
}
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)
installationDirectory
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
installationDirectory = installationDirectory,
runInBackground = TRUE)
dev_packages <- c("Certara.RsNLME",
"Certara.NLME8",
"Certara.Xpose.NLME",
"Certara.RsNLME.ModelExecutor",
"Certara.ModelResults",
"Certara.VPCResults",
"Certara.RsNLME.ModelBuilder",
"Certara.RDarwin",
"Certara.DarwinReporter")
install.packages(dev_packages,
repos = list(
"certara-cran-develop-virtual" = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
# released package install - enter 1 in console
Certara.R::install_certara_packages()
install.packages(dev_packages, repos = list(`certara-cran-develop-virtual` = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"), method = "libcurl")
install.packages(dev_packages,
repos = list(
"certara-cran-develop-virtual" = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
install.packages(dev_packages, repos = list(`certara-cran-develop-virtual` = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"), method = "libcurl")
install.packages(dev_packages, repos = list(`certara-cran-develop-virtual` = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"), method = "libcurl")
install.packages(dev_packages, repos = list(`certara-cran-develop-virtual` = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"), method = "libcurl")
install.packages(dev_packages, repos = list(`certara-cran-develop-virtual` = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"), method = "libcurl")
dev_packages <- c("Certara.RsNLME",
"Certara.NLME8",
"Certara.Xpose.NLME",
"Certara.RsNLME.ModelExecutor",
"Certara.ModelResults",
"Certara.VPCResults",
"Certara.RsNLME.ModelBuilder",
"Certara.RDarwin",
"Certara.DarwinReporter")
install.packages(dev_packages,
repos = list(
"certara-cran-develop-virtual" = "https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
Certara.R::install_certara_packages()
setwd("d:/")
setwd("d:/Test_no_hessian")
library(stringr)
library(dplyr)
library(Certara.RsNLME)
library(data.table)
library(tidyvpc)
model_meta <- create_model_from_metamodel("run17.mmdl")
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine_noHessian")
model_meta <- create_model_from_metamodel("run17.mmdl")
#need this before create_model_from_metamodel
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine_noHessian")
model_meta <- create_model_from_metamodel("run17.mmdl")
#need this before create_model_from_metamodel
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine")
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
#need this before create_model_from_metamodel
#Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine")
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine_noHessian")
Sys.setenv("NLME_HASH" = 1770978959)
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
#need this before create_model_from_metamodel
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine")
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
#Sys.setenv("NLME_HASH" = 1770978959)
Sys.unsetenv("NLME_HASH")
#Sys.setenv("NLME_HASH" = 1770978959)
Sys.getenv("NLME_HASH")
#Sys.setenv("NLME_HASH" = 1770978959)
Sys.unsetenv("NLME_HASH")
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
#need this before create_model_from_metamodel
Sys.unsetenv("NLME_HASH")
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine")
# with new build, with and without setting HASH
#Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine_noHessian")
#Sys.setenv("NLME_HASH" = 1770978959)
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
# with new build, with and without setting HASH
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine_noHessian")
Sys.setenv("NLME_HASH" = 1770978959)
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
#need this before create_model_from_metamodel
Sys.unsetenv("NLME_HASH")
# with new build, with and without setting HASH
Sys.setenv("INSTALLDIR" = "C:/Program Files/Certara/NLME_Engine_noHessian")
model_meta <- create_model_from_metamodel("run17.mmdl")
model_orig <- model_meta$model
fit <- fitmodel(model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = FALSE,
runInBackground = TRUE,
installationDirectory = "C:/Program Files/Certara/NLME_Engine_noHessian")
getwd()
