for(thissub in 1:nsubs){
this_route <- 2 # PO
#  for(this_route in 1:2){ # iv and po
cur_sub <- cur_sub + 1
start <- last + 1
last <- start+nrecs[this_route]-1
data$ID[start:last] <- cur_sub
data$WEIGHT[start:last] <- covs[cur_sub,'WEIGHT']
data$AGE[start:last] <- covs[cur_sub,'AGE']
data$STUDY[start:last] <- 2
data$CMT[start:last] <- 2 # all observations
data$CMT[start] <-  1 # but dose in compartment 1
data$EVID[start] <-  1
data$TSFD[start] <- 0
data$TIMED[start] <- time.of.day# one dose
data$TSFD[(start+1):last] <- samptimes$times
data$TIMED[(start+1):last] <- (samptimes$times + time.of.day)%%24
data$RT[start:last] <- 2
data$AMT[start] <-  PODose
data$ADDL[start] <- addl.doses
data$II[start] <-  4
# change to IV
this_route = 1 # IV
#  for(this_route in 1:2){ # iv and po
start <- last + 1
samptimes2 <- samptimes + 68 + Interval.PO.To.IV # last dose is at 68 hours
last <- start+nrecs[this_route] - 1
data$ID[start:last] <- cur_sub
data$WEIGHT[start:last] <- covs[cur_sub,'WEIGHT']
data$AGE[start:last] <- covs[cur_sub,'AGE']
data$STUDY[start:last] <- 2
data$CMT[start:last] <- 2 # sample and dose in central
data$TSFD[start:(start+1)] <- samptimes2$times[1]
data$TIMED[start:(start+1)] <- (samptimes2$times[1] + time.of.day)%%24
data$TSFD[(start+2):last] <- samptimes2$times
data$TIMED[(start+2):last] <- (samptimes2$times + time.of.day)%%24
data$RT[start:last] <- 1
data$EVID[start:(start+1)] <-  1
data$AMT[start] <-  IVDoseBolus
data$RATE[start] <-  IVDoseBolus*2 # infusion over 30 minutes
data$ADDL[start] <- addl.doses
data$II[start] <-  4
data$AMT[start+1] <-  IVDoseCont * 72
data$RATE[start+1] <- IVDoseCont
data$CMT[start:last] <-  2 # doses and observations
}
# set occasions and fed, only fasted on 8 AM dose
data <- data %>%
mutate(OCC = floor(TSFD/4)) %>%
mutate(FOOD = if_else(TIMED> 6 & TIMED<10,0,1)) # fed if not 6 AM to 10 AM
# insert other event every day at midnight to set fed to 0
resetFedEvents <- data %>% distinct(ID,RT,.keep_all = TRUE)
resetFedEvents$EVID <-  2
resetFedEvents$CMT <-  2
resetFedEvents$FOOD <-  0 # reset to fasted at midnight
resetFedEvents$FLAG <-  -88 # just to track it
resetFedEvents$ADDL <-  resetFedEvents$II <- resetFedEvents$AMT <-  resetFedEvents$RATE <- "."
resetFedEvents$TIMED <- 0 # midnight
resetFedEvents$TSFD <-  resetFedEvents$TSFD  + 16 # midnight
# one record every 24 hours out to 144 hours
allNewRecs <- resetFedEvents
for(this_day in 1:2){
next_day <- resetFedEvents
next_day <- next_day %>% mutate(TSFD = TSFD + this_day * 24)
allNewRecs <-  rbind(allNewRecs,next_day)
}
allNewRecs <- allNewRecs %>%
arrange(ID,RT,TSFD)
data <- rbind(data,allNewRecs)
# insert other event every day at midnight to set fed to 0
resetFedEvents <- data %>% distinct(ID,RT,.keep_all = TRUE)
resetFedEvents$EVID <-  2
resetFedEvents$FLAG <-  -77
resetFedEvents$FOOD <-  1 # reset to fed at noon
resetFedEvents$ADDL <-  resetFedEvents$II <- resetFedEvents$AMT <-  resetFedEvents$RATE <- "."
resetFedEvents$TIMED <- 6 + Interval.PO.To.IV # noon if 6 + Interval.PO.To.IV == 2
resetFedEvents$TSFD <-  resetFedEvents$TSFD  + 2 # 10 AM
# and reset to fed at 10 AM, SINCE FIRST PO DOSE IS AT 8
allNewRecs <- resetFedEvents
for(this_day in 1:2){
next_day <- resetFedEvents
next_day <- next_day %>% mutate(TSFD = TSFD + this_day * 24)
allNewRecs <-  rbind(allNewRecs,next_day)
}
allNewRecs <- allNewRecs %>%
arrange(ID,RT,TSFD)
data <- rbind(data,allNewRecs)
data <- data %>% arrange(ID,TSFD)
# all times from midnight to 10 AM fasted, all others fed
# set TIMED to mod(TSFD+8)
data <- data %>%
mutate(TIMED = (TSFD + 8) %% 24)
# and food between 0 and 10 = 0, else 1 for IV
# for PO (RT == 2, 2 hours after dose)
# po dose (RT=2) now at 8 AM, IV at Interval.PO.To.IV later
data <- data %>%
mutate(FOOD = if_else(RT==2,if_else(TIMED < 10,0,1),
if_else(TIMED < (6 + Interval.PO.To.IV),0,1)))
data <- data %>%
mutate(FOOD = if_else(RT==1 & TIMED < (Interval.PO.To.IV - 4),1,FOOD)) # FIX TIMED = 0-2 AS FED
if(file.exists("simdata.csv")) file.remove("simdata.csv")
if(file.exists("simdata.csv")) warning("Cannot remove simdata.csv")
if(file.exists("food.dat")) file.remove("food.dat")
if(file.exists("food.dat")) warning("Cannot remove food.dat")
if(file.exists("foodPOtoIV.dat")) file.remove("foodPOtoIV.dat")
if(file.exists("foodPOtoIV.dat")) warning("Cannot remove foodPOtoIV.dat")
write_csv(data,"simdata.csv")
write_csv(data,"simdataPOtoIV.csv") # save just to look at/document
## F including Muck
if(file.exists("out.dat")) file.remove("out.dat")
if(file.exists("sim1.lst")) file.remove("sim1.lst")
shell("nmfe74 SIM1.mod SIM1.lst")
sim_output <- read_table("out.dat",skip=1)
file.copy("food.dat","foodPOtoIV.dat") # save to document/check
# only EVID==2
sim_output <- sim_output %>% filter(EVID==2)
# full profile
# mediansConc <- sim_output %>% group_by(TIME,RT) %>%
#  summarise(Median = median(IOBS), Upper = quantile(IOBS,0.975),Lower=quantile(IOBS,0.025)) %>%
#  mutate(RT = ifelse(RT==1,"IV","PO")) %>%
#  mutate(TIME = ifelse(RT=="IV",TIME-(68+Interval.PO.To.IV),TIME))
# full.profileCmax <- ggplot(mediansConc,aes(x=TIME,y=Median,color=RT))+
#  geom_point()+
#  geom_line() +
#  geom_ribbon(data=mediansConc,aes(ymax=Upper,ymin=Lower,
#                                   fill=RT,color=RT),alpha = 0.2,linetype=0)+
#  xlim(c(0,4)) +
#  ggtitle(paste("PO to IV transition"),
#            subtitle = paste("Interval after last PO dose bolus to first IV dose =",Interval.PO.To.IV, "hours")) +
#    annotate(geom = "text", x =1.5, y=10, label=paste("First dose, each route")) +
#  ylab("True Value")
#full.profileCmax
#ggsave(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/PO to #IV,Median, Day 1, First 4 hours_",Interval.PO.To.IV,".jpeg"),device="jpeg",width=8, height=5)
mediansCmin <- sim_output %>% group_by(TIME,RT) %>%
filter(TIME > 66 & TIME<(64+Interval.PO.To.IV + 10)) %>%
summarise(Median = median(IOBS), Upper = quantile(IOBS,0.975), Lower = quantile(IOBS,0.025)) %>%
mutate(ROUTE = ifelse(RT==1,"IV","PO"))
full.profileCmin <- ggplot(mediansCmin,aes(x=TIME,y=Median,color=ROUTE))+
geom_point()+
geom_ribbon(aes(ymax=Upper,ymin = Lower,fill=ROUTE,color=ROUTE),alpha = 0.2,linetype=0)+
geom_line() +
ggtitle(paste("PO to IV transition"),
subtitle = paste("Interval after last PO bolus to first IV dose =",Interval.PO.To.IV, "hours")) +
ylab("True value Concentration (ng/ml) \n(median, upper/lower 95% interval)")+
xlab("Time since initial dose (hours)")+
scale_x_continuous(breaks = seq(66,(66+(66+Interval.PO.To.IV + 6)),2))
full.profileCmin
ggsave(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/PO to IV, Median, Transition_",Interval.PO.To.IV,".jpeg"),device="jpeg",width=8, height=5)
#  peak for IV will be at 68+Interval.PO.To.IV + 0.5
IV_Cmax <- sim_output %>%
filter(TIME<(68+Interval.PO.To.IV + 2),RT==1) %>%
group_by(ID) %>%
summarize(Cmax = max(IOBS))   %>%
summarize(Median= round(median(Cmax),1),
Upper = round(quantile(Cmax,0.975),1),
Lower = round(quantile(Cmax,0.025),1),
GeoMean = round(exp(mean(log(Cmax))),1),
CV = round(sd(log(Cmax))*100,1))
# Cmin at end of first IV dose, dose at 68 +Interval.PO.To.IV + 4
IV_Cmin <- sim_output %>%
filter(TIME==(68+Interval.PO.To.IV+4),RT==1)  %>%
group_by(ID) %>%
summarize(Cmin = min(IOBS))   %>%
summarize(Median= round(median(Cmin),1),
Upper = round(quantile(Cmin,0.975),1),
Lower = round(quantile(Cmin,0.025),1),
GeoMean = round(exp(mean(log(Cmin))),1),
CV = round(sd(log(Cmin))*100,1))
#### PO
# CMAX SHOULD BE T 68.25 - 70
PO_Cmax <- sim_output %>%
filter(TIME >= 68 & RT==2 & TIME<=(68+2)) %>%
group_by(ID) %>%
summarize(Cmax = max(IOBS))   %>%
summarize(Median= round(median(Cmax),2),
Upper = round(quantile(Cmax,0.975),1),
Lower = round(quantile(Cmax,0.025),1),
GeoMean = round(exp(mean(log(Cmax))),1),
CV = round(sd(log(Cmax))*100,1))
# CMIN AT END OF LAST po INTERVAL (68+INTERVAL) JUST BEFORE FIRST iv DOSE, concentration starts in increase
# immediately with IV dose
PO_Cmin <- sim_output %>%
filter(TIME==(68+Interval.PO.To.IV) & RT==2)  %>%
summarize(Median= round(median(IOBS),1),
Upper = round(quantile(IOBS,0.975),1),
Lower = round(quantile(IOBS,0.025),1),
GeoMean = round(exp(mean(log(IOBS))),1),
CV = round(sd(log(IOBS))*100,1))
CmaxTable <- data.frame("Route"= c("PO","IV"),
"GeoMean Cmax"= c(paste0(PO_Cmax$GeoMean," (",PO_Cmax$CV,")"),
paste0(IV_Cmax$GeoMean," (",IV_Cmax$CV,")")),
"Median"= c(paste0(PO_Cmax$Median," (",PO_Cmax$Lower,",",PO_Cmax$Upper,")"),
paste0(IV_Cmax$Median," (",IV_Cmax$Lower,",",IV_Cmax$Upper,")")
))
# CmaxTable <- data.frame("Route"= c("PO","IV"),
#                        "GeoMean Cmax"= c(PO_Cmax$GeoMean,IV_Cmax$GeoMean),
#                        "CV Cmax"= c(PO_Cmax$CV,IV_Cmax$CV),
#                        "Median"= c(PO_Cmax$Median,IV_Cmax$Median),
#                        "Lower"= c(PO_Cmax$Lower,IV_Cmax$Lower),
#                        "Upper"= c(PO_Cmax$Upper,IV_Cmax$Upper)
# )
#
write_csv(CmaxTable,paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CmaxParms_allPOtoIV_",Interval.PO.To.IV,".csv"))
CmaxOutput <- flextable(CmaxTable)
save_as_docx(CmaxOutput,path=paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/PO to IV, Cmax_first_dose_",Interval.PO.To.IV,".docx") )
CmaxOutput
CminTable <- data.frame("Route"= c("PO","IV"),
"GeoMean Cmin"= c(paste0(PO_Cmin$GeoMean,"(",PO_Cmin$CV,")"),
paste0(IV_Cmin$GeoMean,"(",IV_Cmin$CV,")")),
"Median"= c(paste0(PO_Cmin$Median,"(",PO_Cmin$Lower,",",PO_Cmin$Upper,")"),
paste0(IV_Cmin$Median,"(",IV_Cmin$Lower,",",IV_Cmin$Upper,")")
))
write_csv(CminTable,paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CminParms_allPOtoIV_",Interval.PO.To.IV,".csv"))
#
# CminTable <- data.frame("Route"= c("PO","IV"),
#                        "GeoMean Cmin"= c(PO_Cmin$GeoMean,IV_Cmin$GeoMean),
#                        "CV Cmin"= c(PO_Cmin$CV,IV_Cmin$CV),
#                        "Median"= c(PO_Cmin$Median,IV_Cmin$Median),
#                        "Lower"= c(PO_Cmin$Lower,IV_Cmin$Lower),
#                        "Upper"= c(PO_Cmin$Upper,IV_Cmin$Upper)
# )
CminOutput <- flextable(CminTable)
save_as_docx(CminOutput,path=paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/PO to IV, Cmin_first_dose_",Interval.PO.To.IV,".docx") )
CminOutput
outputMedianIV2PO <- data.frame(
Four_hours = c("XX","XX","XX","XX"),
Five_hours =  c("XX","XX","XX","XX"),
Six_hours  =  c("XX","XX","XX","XX")
)
outputMedianIV2PO$Stat <- c("CmaxIV","CmaxPO","CminIV","CminPO")
outputMedianIV2PO <- outputMedianIV2PO %>% dplyr::select(Stat,Four_hours,Five_hours,Six_hours)
outputMeanIV2PO <- data.frame(
Four_hours = c("XX","XX","XX","XX"),
Five_hours =  c("XX","XX","XX","XX"),
Six_hours  =  c("XX","XX","XX","XX")
)
outputMeanIV2PO$Stat <- c("CmaxIV","CmaxPO","CminIV","CminPO")
outputMeanIV2PO <- outputMeanIV2PO %>% dplyr::select(Stat,Four_hours,Five_hours,Six_hours)
interval <- 4
for(interval in 4:6){
# IV to PO median
Cmaxdata <- read.csv(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CmaxParms_allIVtoPO_",interval,".csv") )
outputMedianIV2PO[2,(interval-2)] <- Cmaxdata$Median[1]
outputMedianIV2PO[1,(interval-2)] <- Cmaxdata$Median[2]
outputMeanIV2PO[2,(interval-2)] <- Cmaxdata$GeoMean.Cmax[1]
outputMeanIV2PO[1,(interval-2)] <- Cmaxdata$GeoMean.Cmax[2]
Cmindata <- read.csv(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CminParms_allIVtoPO_",interval,".csv") )
outputMedianIV2PO[4,(interval-2)] <- Cmindata$Median[1]
outputMedianIV2PO[3,(interval-2)] <- Cmindata$Median[2]
outputMeanIV2PO[4,(interval-2)] <- Cmindata$GeoMean.Cmin[1]
outputMeanIV2PO[3,(interval-2)] <- Cmindata$GeoMean.Cmin[2]
}
MedianIV2POOutput <- flextable(outputMedianIV2PO)
save_as_docx(MedianIV2POOutput,path=paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/IV 2 PO, Median Summary.docx") )
MeanIV2POOutput <- flextable(outputMeanIV2PO)
save_as_docx(MeanIV2POOutput,path=paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/IV 2 PO, Mean Summary.docx") )
## PO to iv
############
outputMedianPO2IV <- data.frame(
Four_hours = c("XX","XX","XX","XX"),
Five_hours =  c("XX","XX","XX","XX"),
Six_hours  =  c("XX","XX","XX","XX")
)
outputMedianPO2IV$Stat <- c("CmaxIV","CmaxPO","CminIV","CminPO")
outputMedianPO2IV <- outputMedianPO2IV %>% dplyr::select(Stat,Four_hours,Five_hours,Six_hours)
outputMeanPO2IV <- data.frame(
Four_hours = c("XX","XX","XX","XX"),
Five_hours =  c("XX","XX","XX","XX"),
Six_hours  =  c("XX","XX","XX","XX")
)
outputMeanPO2IV$Stat <- c("CmaxIV","CmaxPO","CminIV","CminPO")
outputMeanPO2IV <- outputMeanPO2IV %>% dplyr::select(Stat,Four_hours,Five_hours,Six_hours)
interval <- 4
for(interval in 4:6){
#  PO to IV median
Cmaxdata <- read.csv(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CmaxParms_allPOtoIV_",interval,".csv") )
outputMedianPO2IV[2,(interval-2)] <- Cmaxdata$Median[1]
outputMedianPO2IV[1,(interval-2)] <- Cmaxdata$Median[2]
outputMeanPO2IV[2,(interval-2)] <- Cmaxdata$GeoMean.Cmax[1]
outputMeanPO2IV[1,(interval-2)] <- Cmaxdata$GeoMean.Cmax[2]
Cmindata <- read.csv(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CminParms_allPOtoIV_",interval,".csv") )
outputMedianPO2IV[4,(interval-2)] <- Cmindata$Median[1]
outputMedianPO2IV[3,(interval-2)] <- Cmindata$Median[2]
outputMeanPO2IV[4,(interval-2)] <- Cmindata$GeoMean.Cmin[1]
outputMeanPO2IV[3,(interval-2)] <- Cmindata$GeoMean.Cmin[2]
}
MedianPO2IVOutput <- flextable(outputMedianPO2IV)
save_as_docx(MedianPO2IVOutput,path=paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/PO 2 IV, Median Summary.docx") )
MeanPO2IVOutput <- flextable(outputMeanPO2IV)
save_as_docx(MeanPO2IVOutput,path=paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/PO 2 IV Mean Summary.docx") )
(8.9-6)/8.9
(9.1-6)/8.9
(8.9-5.9)/8.9
(9-6)/9
(9.1-6)/9.1
!TRUE
library(dplyr)
library(ggplot)
rm(list=ls())
WT <- exp(rnorm(100,log(70)))
V <- 100+0.1*WT - 0.01*WT^2
qplot(WT,V)
?ggplot2
library(ggplot2)
rm(list=ls())
WT <- exp(rnorm(100,log(70)))
V <- 100+0.1*WT - 0.01*WT^2
qplot(WT,V)
V <- 100-0.1*WT +0.01*WT^2
qplot(WT,V)
WT <- exp(rnorm(100,log(70),0.1))
V <- 100-0.1*WT +0.01*WT^2
qplot(WT,V)
V <- 100-0.1*WT +0.1*WT^2
qplot(WT,V)
V <- 100-0.1*WT +0.2*WT^2
qplot(WT,V)
Cmaxdata <- read.csv(paste0("C:/Users/msale/Certara/ACAS-PMX-GTX104-5661 - Project Data/Deliverables/Simulations/CmaxParms_allPOtoIV_",interval,".csv") )
library(dplyr)
library(ggplot2)
rm(list=ls())
WT <- exp(rnorm(100,log(70),0.1))
V <- 100-0.1*WT +0.2*WT^2
qplot(WT,V)
V <- 100-1*WT +0.2*WT^2
qplot(WT,V)
V <- 100-1*WT +0.2*WT^2 - 0.4*WT^3
qplot(WT,V)
V <- 100-1*WT +0.2*WT^2 - 0.4*WT^3 + 0.5*WT^4
qplot(WT,V)
V <- 100-10*WT +0.2*WT^2 - 0.4*WT^3 + 0.5*WT^4
qplot(WT,V)
library(loo)
?psis
library(Certara.RsNLME)
library(loo)
library(Certara.RsNLME)
library(loo)
library(Certara.RDarwin)
library(Certara.DarwinReporter)
head(Certara.RsNLME::pkData)
models <- get_PMLParametersSets(CompartmentsNumber = c(1, 2, 3))
models <- models |>
modify_Omega(Name = "nV2", State = "Searched") |>
modify_Omega(Name = "nCl2", State = "Searched") |>
modify_Omega(Name = "nV3", State = "Searched") |>
modify_Omega(Name = "nCl3", State = "Searched")
models <- models |>
add_Covariate(Name = "Age", StParmNames = c("V", "Cl"), State = "Searched") |>
add_Covariate(Name = "BW", StParmNames = c("V", "Cl"), State = "Searched", Center = 70) |>
add_Covariate(Name = "Sex", Type = "Categorical", StParmNames = c("V", "Cl"), State = "Searched", Categories = c(0, 1))
models <- models |>
modify_Observation(
ObservationName = "CObs",
SigmasChosen = Sigmas(
AdditiveMultiplicative = list(PropPart = 0.1, AddPart = 0.01),
Proportional = 0.1
)
)
optionSetup <- create_pyDarwinOptions(
algorithm = "GA",
num_generations = 3,
population_size = 10,
downhill_period = 0,
local_2_bit_search = FALSE,
final_downhill_search = FALSE,
working_dir = getwd(),
remove_temp_dir = FALSE
)
write_pyDarwinOptions(pyDarwinOptions = optionSetup)
write_ModelTemplateTokens(Description = "Search-numCpt-PeripherialRanef-3CovariatesOnClV-RSE",
Author = "Certara",
DataFilePath = "pkData.csv",
DataMapping = c(id = "Subject", time = "Act_Time", AMT = "Amount", CObs = "Conc", Age = "Age", BW = "BodyWeight", Sex = "Gender(female = 0, male = 1)"),
PMLParametersSets = models
)
job <- run_pyDarwin(InterpreterPath = "C:/Users/msale/AppData/Local/Programs/Python/Python310/python.exe", Wait = TRUE)
ddb <- darwin_data(project_dir = getwd())
fitness_vs_iteration(ddb)
log_ratios <- -1 * example_loglik_array()
library(psis)
library(loo)
log_ratios <- -1 * example_loglik_array()
r_eff <- relative_eff(exp(-log_ratios))
r_eff
psis(log_ratios, r_eff = r_eff)
psis(log_ratios, r_eff = r_eff) -> a
a
lw <- weights(psis_result) # default args are log=TRUE, normalize=TRUE
lw <- weights(a)
lw
loo
?loo
psis_vals <-  psis(log_ratios, r_eff = r_eff)
psis_vals
log_ratios <- -1 * example_loglik_array()
r_eff <- relative_eff(exp(-log_ratios))
loo_val <- loo(example_loglik_array(),ref_eff)
loo_val
loo_val$pointwise
library(loo)
library(rstanarm)
library(loo)
data(milk)
d <- milk[complete.cases(milk),]
d$neocortex <- d$neocortex.perc /100
str(d)
fit1 <- stan_glm(kcal.per.g ~ 1, data = d, seed = 2030)
fit2 <- update(fit1, formula = kcal.per.g ~ neocortex)
fit3 <- update(fit1, formula = kcal.per.g ~ log(mass))
fit4 <- update(fit1, formula = kcal.per.g ~ neocortex + log(mass))
waic1 <- waic(fit1)
waic2 <- waic(fit2)
waic3 <- waic(fit3)
waic4 <- waic(fit4)
waics <- c(
waic1$estimates["elpd_waic", 1],
waic2$estimates["elpd_waic", 1],
waic3$estimates["elpd_waic", 1],
waic4$estimates["elpd_waic", 1]
)
loo1 <- loo(fit1)
loo2 <- loo(fit2)
loo3 <- loo(fit3)
loo4 <- loo(fit4)
lpd_point <- cbind(
loo1$pointwise[,"elpd_loo"],
loo2$pointwise[,"elpd_loo"],
loo3$pointwise[,"elpd_loo"],
loo4$pointwise[,"elpd_loo"]
)
print(loo3)
print(loo3)
print(loo4)
fit1
# using list of loo objects
loo_list <- list(loo1, loo2, loo3,loo4)
loo_model_weights(loo_list)
install.packages("Certara.RsNLME.ModelExecutor",
repos = list(
"certara-cran-develop-virtual" = "
https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
install.packages("Certara.RsNLME.ModelExecutor",
repos = list(
"certara-cran-develop-virtual" = "
https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
install.packages("
https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/src/contrib/Certara.RsNLME.ModelExecutor_2.0.1.9086.tar.gz"
,
repos = NULL, method = "libcurl", type = "source")
install.packages("https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/src/contrib/Certara.RsNLME.ModelExecutor_2.0.1.9086.tar.gz",repos = NULL, method = "libcurl", type = "source")
library(Certara.RsNLME)
detach("package:Certara.RsNLME", unload = TRUE)
library(tictoc)
library(dplyr)
library(MASS)
library(future)
library(tidyvpc)
library(ggplot2)
library(loo)
library(readr)
rm(list=ls())
# reads xml file from NONMEM, returns list of key values
source("c:/rcode/ReadNM_xml.r")
tic()
set.seed(1)
# make data
nsubs <- 60
nmodels <- 2
nDraws <- 2000
nsamps <- 5
home_dir <- getwd()
# data.csv is data set to be fit, 50% model 1 + 50% model 2
if(file.exists("data.csv")){file.remove("data.csv")}
model_dirs <- c(file.path(home_dir,"mean"),file.path(home_dir,"slope"))
# create simulation data set for both model 1 and model 2 simulation
data <- data.frame(matrix(nrow = nsubs*nsamps, ncol = 0))
data$ID <- rep(1:nsubs,each = nsamps)
data$DV <- "."
data$IDV <- rep(1:nsamps)
# run sim for mean and slope
write.csv(data,file.path(home_dir,"simdata.csv"), quote=FALSE, row.names = FALSE)
setwd(model_dirs[1])
rm(list=ls())
home_dir <- getwd()
library(Metrics)
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"DATA","make_data.r"))
setwd("c:/git/adpobenchmark")
rm(list=ls())
home_dir <- getwd()
library(Metrics)
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"DATA","make_data.r"))
source(file.path(home_dir,"CopyNONMEMControls.R"))
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls.R(home_dir)
source(file.path(home_dir,"CopyNONMEMControls.R"))
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls(home_dir)
