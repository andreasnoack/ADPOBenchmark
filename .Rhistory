str(d)
fit1 <- stan_glm(kcal.per.g ~ 1, data = d, seed = 2030)
fit2 <- update(fit1, formula = kcal.per.g ~ neocortex)
fit3 <- update(fit1, formula = kcal.per.g ~ log(mass))
fit4 <- update(fit1, formula = kcal.per.g ~ neocortex + log(mass))
waic1 <- waic(fit1)
waic2 <- waic(fit2)
waic3 <- waic(fit3)
waic4 <- waic(fit4)
waics <- c(
waic1$estimates["elpd_waic", 1],
waic2$estimates["elpd_waic", 1],
waic3$estimates["elpd_waic", 1],
waic4$estimates["elpd_waic", 1]
)
loo1 <- loo(fit1)
loo2 <- loo(fit2)
loo3 <- loo(fit3)
loo4 <- loo(fit4)
lpd_point <- cbind(
loo1$pointwise[,"elpd_loo"],
loo2$pointwise[,"elpd_loo"],
loo3$pointwise[,"elpd_loo"],
loo4$pointwise[,"elpd_loo"]
)
print(loo3)
print(loo3)
print(loo4)
fit1
# using list of loo objects
loo_list <- list(loo1, loo2, loo3,loo4)
loo_model_weights(loo_list)
install.packages("Certara.RsNLME.ModelExecutor",
repos = list(
"certara-cran-develop-virtual" = "
https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
install.packages("Certara.RsNLME.ModelExecutor",
repos = list(
"certara-cran-develop-virtual" = "
https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/"
), method = "libcurl"
)
install.packages("
https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/src/contrib/Certara.RsNLME.ModelExecutor_2.0.1.9086.tar.gz"
,
repos = NULL, method = "libcurl", type = "source")
install.packages("https://cran-reader-internal:zqLsKiHDvFR@certara.jfrog.io/artifactory/shared-cran-develop-local/src/contrib/Certara.RsNLME.ModelExecutor_2.0.1.9086.tar.gz",repos = NULL, method = "libcurl", type = "source")
library(Certara.RsNLME)
detach("package:Certara.RsNLME", unload = TRUE)
library(tictoc)
library(dplyr)
library(MASS)
library(future)
library(tidyvpc)
library(ggplot2)
library(loo)
library(readr)
rm(list=ls())
# reads xml file from NONMEM, returns list of key values
source("c:/rcode/ReadNM_xml.r")
tic()
set.seed(1)
# make data
nsubs <- 60
nmodels <- 2
nDraws <- 2000
nsamps <- 5
home_dir <- getwd()
# data.csv is data set to be fit, 50% model 1 + 50% model 2
if(file.exists("data.csv")){file.remove("data.csv")}
model_dirs <- c(file.path(home_dir,"mean"),file.path(home_dir,"slope"))
# create simulation data set for both model 1 and model 2 simulation
data <- data.frame(matrix(nrow = nsubs*nsamps, ncol = 0))
data$ID <- rep(1:nsubs,each = nsamps)
data$DV <- "."
data$IDV <- rep(1:nsamps)
# run sim for mean and slope
write.csv(data,file.path(home_dir,"simdata.csv"), quote=FALSE, row.names = FALSE)
setwd(model_dirs[1])
rm(list=ls())
home_dir <- getwd()
library(Metrics)
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"DATA","make_data.r"))
setwd("c:/git/adpobenchmark")
rm(list=ls())
home_dir <- getwd()
library(Metrics)
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"DATA","make_data.r"))
source(file.path(home_dir,"CopyNONMEMControls.R"))
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls.R(home_dir)
source(file.path(home_dir,"CopyNONMEMControls.R"))
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls(home_dir)
a = 4
a
rm(list=ls())
rm(list=ls())
home_dir <- getwd()
library(Metrics)
source(file.path(home_dir,"make_data.R"))
source(file.path(home_dir,"check_data.R"))
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"DATA","make_data.r"))
source(file.path(home_dir,"CopyNONMEMControls.R"))
NLME_standard_data <- read.csv(file.path(home_dir,"NLMEResults_standard.csv"))
colnames(NLME_standard_data) <- paste0("NLME_ST",colnames(NLME_standard_data))
# append NLME_ST to column names
NLME_ADPO_data <- read.csv(file.path(home_dir,"NLMEResults_ADPO.csv")) %>%
dplyr::distinct(Model_num,.keep_all=TRUE)
# append NLME_ADPO to column names
# data set for run time ratio/RMSE ratio/MAE ratio
all_data <- cbind(NONMEM_data,
NLME_standard_data)
# check that genome is the same
check <- all_data %>%
mutate(This_compOK = (NMthis_comp == NLME_STthis_comp),
This_etaOK = (NMthis_eta == NLME_STthis_eta),
This_thisvwtOK = (NMthis_vwt == NLME_STthis_vwt),
This_gammaOK = (NMthis_gamma == NLME_STthis_gamma)) %>%
select(This_compOK,This_etaOK,This_thisvwtOK,This_gammaOK)
NONMEM_data <- read.csv(file.path(home_dir,"NONMEMResults.csv"))
# Append NM to column names
colnames(NONMEM_data) <- paste0("NM",colnames(NONMEM_data))
NLME_standard_data <- read.csv(file.path(home_dir,"NLMEResults_standard.csv"))
colnames(NLME_standard_data) <- paste0("NLME_ST",colnames(NLME_standard_data))
# append NLME_ST to column names
NLME_ADPO_data <- read.csv(file.path(home_dir,"NLMEResults_ADPO.csv")) %>%
dplyr::distinct(Model_num,.keep_all=TRUE)
# append NLME_ADPO to column names
# data set for run time ratio/RMSE ratio/MAE ratio
all_data <- cbind(NONMEM_data,
NLME_standard_data)
View(NLME_ADPO_data)
View(NLME_standard_data)
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num) %>%
filter(NLME_STModel_num<=9)
# append NLME_ST to column names
NLME_ADPO_data <- read.csv(file.path(home_dir,"NLMEResults_ADPO.csv")) %>%
dplyr::distinct(Model_num,.keep_all=TRUE)
# append NLME_ADPO to column names
# data set for run time ratio/RMSE ratio/MAE ratio
all_data <- cbind(NONMEM_data,
NLME_standard_data)
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num) %>%
filter(NLME_STModel_num<=8)
# append NLME_ST to column names
NLME_ADPO_data <- read.csv(file.path(home_dir,"NLMEResults_ADPO.csv")) %>%
dplyr::distinct(Model_num,.keep_all=TRUE)
# append NLME_ADPO to column names
# data set for run time ratio/RMSE ratio/MAE ratio
all_data <- cbind(NONMEM_data,
NLME_standard_data)
# check that genome is the same
check <- all_data %>%
mutate(This_compOK = (NMthis_comp == NLME_STthis_comp),
This_etaOK = (NMthis_eta == NLME_STthis_eta),
This_thisvwtOK = (NMthis_vwt == NLME_STthis_vwt),
This_gammaOK = (NMthis_gamma == NLME_STthis_gamma)) %>%
select(This_compOK,This_etaOK,This_thisvwtOK,This_gammaOK)
all_data
View(NLME_standard_data)
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num) %>%
filter(NLME_STModel_num<=8, .keep_all = TRUE)
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num,.keep_all = TRUE) %>%
filter(NLME_STModel_num<=8)
# append NLME_ST to column names
NLME_ADPO_data <- read.csv(file.path(home_dir,"NLMEResults_ADPO.csv")) %>%
dplyr::distinct(Model_num,.keep_all=TRUE)
# append NLME_ADPO to column names
# data set for run time ratio/RMSE ratio/MAE ratio
all_data <- cbind(NONMEM_data,
NLME_standard_data)
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num,.keep_all = TRUE)
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num, keep_all = TRUE) %>%
filter(NLME_STModel_num<=8)
?distinct
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num, .keep_all = TRUE)
NLME_standard_data <- read.csv(file.path(home_dir,"NLMEResults_standard.csv"))
colnames(NLME_standard_data) <- paste0("NLME_ST",colnames(NLME_standard_data))
NLME_standard_data <- NLME_standard_data %>%
distinct(NLME_STModel_num, .keep_all = TRUE) %>%
filter(NLME_STModel_num<=8)
# append NLME_ST to column names
NLME_ADPO_data <- read.csv(file.path(home_dir,"NLMEResults_ADPO.csv")) %>%
dplyr::distinct(Model_num,.keep_all=TRUE)
# append NLME_ADPO to column names
# data set for run time ratio/RMSE ratio/MAE ratio
all_data <- cbind(NONMEM_data,
NLME_standard_data)
# check that genome is the same
check <- all_data %>%
mutate(This_compOK = (NMthis_comp == NLME_STthis_comp),
This_etaOK = (NMthis_eta == NLME_STthis_eta),
This_thisvwtOK = (NMthis_vwt == NLME_STthis_vwt),
This_gammaOK = (NMthis_gamma == NLME_STthis_gamma)) %>%
select(This_compOK,This_etaOK,This_thisvwtOK,This_gammaOK)
check
print(check)
ratios <-  all_data %>%
mutate(NM_NLMEStEst = NMEst_time/NLME_STEst_time,
NM_NLMEStCOV = NMCov_time/NLME_STCov_time,
NM_NLMERMSE = NMRMSE/NLME_STRMSE,
NM_NLMEMAE = NMMAE/NLME_STMAE) %>%
select(NM_NLMEStEst,NM_NLMEStCOV,NM_NLMERMSE,NM_NLMEMAE)
ratios
library(ggplot2)
ggplot(all_data) +
geom_histogram(aes(x=NMEst_time,colour = NMAlgorithm,fill=NMAlgorithm),alpha = 0.4) +
geom_histogram(aes(x=NLME_STEst_time,colour = NLME_STAlgorithm,fill=NLME_STAlgorithm),alpha = 0.4)
NM_NLMEST_ESTTime <- ggplot(all_data) +
geom_histogram(aes(x=NMEst_time,colour = NMAlgorithm,fill=NMAlgorithm),alpha = 0.4) +
geom_histogram(aes(x=NLME_STEst_time,colour = NLME_STAlgorithm,fill=NLME_STAlgorithm),alpha = 0.4)
?ggsave
ggsave("NMvsNLMESTEstTime.jpeg",
plot= NM_NLMEST_ESTTime,
device="jpeg",
width=8,
height=5)
print(NM_NLMEST_ESTTime)
NM_NLMEST_ESTTime <- ggplot(all_data) +
geom_histogram(aes(x=NMEst_time,colour = NMAlgorithm,fill=NMAlgorithm),alpha = 0.4) +
geom_histogram(aes(x=NLME_STEst_time,colour = NLME_STAlgorithm,fill=NLME_STAlgorithm),alpha = 0.4) +
xlab("Estimation time (seconds)")
ggsave("NMvsNLMESTEstTime.jpeg",
plot= NM_NLMEST_ESTTime,
device="jpeg",
width=8,
height=5)
print(NM_NLMEST_ESTTime)
NM_NLMEST_COVTime <- ggplot(all_data) +
geom_histogram(aes(x=NMCov_time,colour = NMAlgorithm,fill=NMAlgorithm),alpha = 0.4) +
geom_histogram(aes(x=NLME_STCov_time,colour = NLME_STAlgorithm,fill=NLME_STAlgorithm),alpha = 0.4) +
xlab("Estimation time (seconds)")
ggsave("NMvsNLMESTCovTime.jpeg",
plot= NM_NLMEST_ESTTime,
device="jpeg",
width=8,
height=5)
print(NM_NLMEST_COVTime)
rm(list=ls())
home_dir <- getwd()
library(Metrics)
install.packages("Metrics")
library(Metrics)
source(file.path(home_dir,"make_data.R"))
source(file.path(home_dir,"check_data.R"))
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.r"))
source(file.path(home_dir,"GetTrueParms.r"))
source(file.path(home_dir,"DATA","make_data.r"))
source(file.path(home_dir,"CopyNONMEMControls.R"))
source(file.path(home_dir,"CopyNLMEControls.R"))
# no need to recreate models
# this freezes when run from here
# need to step through r file, run pydarwin from command line
#make_data(home_dir)
# make NONMEM control files
# note that the run directory in options.json must be an absolute path
# this must be set manually, current value is c:\git\adpoBenchmark\nonmem\run
#setwd(file.path(home_dir,"pydarwin_nonmem"))
#shell("python -m darwin.run_search_in_folder .")
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls(home_dir)
install.packages("readtext")
library(stringr)
library(readr)
home_dir
this_model <- 1
for(this_model in 1:72){
file <- file.path(home_dir,"NONMEM","run","0",str_pad(this_model, 2, pad = "0"),paste0("NM_0_",str_pad(this_model, 2, pad = "0"),".mod"))
control <- readtext::readtext(file, verbosity  = 0)$text
control <- str_replace(control,";;\\$EST","$EST")
control <- str_replace(control,";;\\$COV","$COV")
new_dir <- file.path(home_dir,"NONMEM",this_model)
if(!file.exists(new_dir)) dir.create(new_dir)
new_file <- file.path(new_dir,paste0("Run",this_model,".mod"))
writeLines(control[[1]], new_file)
}
library(stringr)
library(readr)
this_model <- 1
for(this_model in 1:72){
file <- file.path(home_dir,"NLME","run","0",str_pad(this_model, 2, pad = "0"),paste0("NLME_0_",str_pad(this_model, 2, pad = "0"),".mmdl"))
control <- readtext::readtext(file, verbosity  = 0)$text
control <- str_replace(control,"numIterations = 10","numIterations = 9999")
new_dir <- file.path(home_dir,"NLME",this_model)
if(!file.exists(new_dir)) dir.create(new_dir)
new_file <- file.path(new_dir,paste0("Run",this_model,".mmdl"))
writeLines(control[[1]], new_file)
}
for(i in 1:72){
check_data(home_dir,i)
}
curr_model
curr_model = 1
# check if model an data file agree with model #
control <- readtext::readtext(file.path(home_dir,"NONMEM",curr_model,paste0("Run",curr_model,".mod")),verbosity =0)$text
control <- str_split(control,"\n")
phenotype <- grep(";;; Model Identifier", unlist(control))
phenotype <- control[[1]][phenotype[[1]]]
phenotype <- str_trim(str_replace(phenotype,"  ;;; Model Identifier = ",""))
phenotype <- str_split(phenotype,",")[[1]]
phenotype
datafile <-  control[[1]][grep(paste0("DATA      ",home_dir), unlist(control))]
datafile <- str_trim(str_replace(datafile,"\\$DATA" ,""))
datafile <- str_trim(str_replace(datafile,paste0(home_dir,"/data/sim_"),""))
datafile <- str_trim(str_replace(datafile,".csv IGNORE=@",""))
datafile <- str_split(datafile,"_")[[1]]
datafile
datafile <-  control[[1]][grep(paste0("DATA      ",home_dir), unlist(control))]
datafile
unlist(control)
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls(home_dir)
CopyNLMEControls(home_dir)
home_dir
this_model <- 1
file <- file.path(home_dir,"NONMEM","run","0",str_pad(this_model, 2, pad = "0"),paste0("NM_0_",str_pad(this_model, 2, pad = "0"),".mod"))
control <- readtext::readtext(file, verbosity  = 0)$text
curr_model <- 0
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
curr_model <- curr_model + 1
file <- file.path(home_dir,"data","pyDarwin_makedata",paste0("OUT_",this_comp,"_",this_eta,"_",this_vwt,"_",this_gamma,".DAT"))
sim_data <- read_table(file,skip=0,
col_names = FALSE,show_col_types = FALSE)
colnames(sim_data) <-  c("ID","TIME","AMT","IOBS","EVID","WT")
sim_data <- sim_data %>%
mutate(IOBS = if_else(IOBS>0,IOBS,LLOQ/2 )) %>%       # can't be < zero
mutate(BQL = if_else(IOBS < LLOQ,1,0))  %>%           # set BQL
mutate(IOBS = if_else(EVID==1,".",as.character(IOBS))) %>% # IOBS missing if dose
mutate(BQL = if_else(EVID==1,".",as.character(BQL)))  %>% # BQL == "." if dose
mutate(IOBSBQL = IOBS)
sim_data <- sim_data %>%
mutate(IOBSBQL = if_else(IOBSBQL < LLOQ,as.character(LLOQ/2),as.character(IOBSBQL))) %>% #
mutate(IOBSBQL = if_else(EVID==1,".",as.character(IOBSBQL))) %>%
select(ID, TIME, AMT, IOBS, EVID, BQL, IOBSBQL, WT )
write_csv(sim_data,file=file.path(home_dir, "data", paste0("sim_",this_comp,"_",this_eta,"_",this_vwt,"_",this_gamma,".csv")))
}
}
}
}
LLOQ <- 0.1
set.seed(1)
nsubs <-  60
dose <-  100000 # mcg
WT_mean <- 70
WT_CV <- 0.2
mean_times <- c(0.5,2,6,12,24,48,96,120)
cv_times <- 0.1
data <- data.frame(matrix(-999, nrow=nsubs*9, ncol=7))
colnames(data) <- c("ID","TIME","AMT","DV","EVID","BQL","WT")
WTs <- exp(rnorm(nsubs,log(WT_mean),WT_CV))
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
curr_model <- curr_model + 1
file <- file.path(home_dir,"data","pyDarwin_makedata",paste0("OUT_",this_comp,"_",this_eta,"_",this_vwt,"_",this_gamma,".DAT"))
sim_data <- read_table(file,skip=0,
col_names = FALSE,show_col_types = FALSE)
colnames(sim_data) <-  c("ID","TIME","AMT","IOBS","EVID","WT")
sim_data <- sim_data %>%
mutate(IOBS = if_else(IOBS>0,IOBS,LLOQ/2 )) %>%       # can't be < zero
mutate(BQL = if_else(IOBS < LLOQ,1,0))  %>%           # set BQL
mutate(IOBS = if_else(EVID==1,".",as.character(IOBS))) %>% # IOBS missing if dose
mutate(BQL = if_else(EVID==1,".",as.character(BQL)))  %>% # BQL == "." if dose
mutate(IOBSBQL = IOBS)
sim_data <- sim_data %>%
mutate(IOBSBQL = if_else(IOBSBQL < LLOQ,as.character(LLOQ/2),as.character(IOBSBQL))) %>% #
mutate(IOBSBQL = if_else(EVID==1,".",as.character(IOBSBQL))) %>%
select(ID, TIME, AMT, IOBS, EVID, BQL, IOBSBQL, WT )
write_csv(sim_data,file=file.path(home_dir, "data", paste0("sim_",this_comp,"_",this_eta,"_",this_vwt,"_",this_gamma,".csv")))
}
}
}
}
# uncomment $EST and $COV copy to home_dir/NONMEM/run?.mod
CopyNONMEMControls(home_dir)
for(i in 1:72){
check_data(home_dir,i)
}
curr_model
curr_model = 1
# check if model an data file agree with model #
control <- readtext::readtext(file.path(home_dir,"NONMEM",curr_model,paste0("Run",curr_model,".mod")),verbosity =0)$text
control <- str_split(control,"\n")
phenotype <- grep(";;; Model Identifier", unlist(control))
phenotype <- control[[1]][phenotype[[1]]]
phenotype <- str_trim(str_replace(phenotype,"  ;;; Model Identifier = ",""))
phenotype <- str_split(phenotype,",")[[1]]
datafile <-  control[[1]][grep(paste0("DATA      ",home_dir), unlist(control))]
phenotype
datafile <-  control[[1]][grep(paste0("DATA      ",home_dir), unlist(control))]
datafile
paste0("DATA      ",home_dir)
control[[1]]
edit(control)
datafile <-  control[[1]][grep(paste0("DATA      ",home_dir), unlist(control))]
datafile
paste0("DATA      ",home_dir)
control
control[[1]]
paste0("DATA      ",home_dir
)
datafile <-  control[[1]][grep(paste0(home_dir), unlist(control))]
datafile
home_dir
control
to.lower(control[[1]])
tolower(control[[1]]
tolower(control[[1]]
)
datafile <-  control[[1]][grep(tolower(paste0("DATA      ",home_dir)), tolower(unlist(control)))]
datafile
datafile <-  control[[1]][grep(tolower(paste0("DATA      ",home_dir)), tolower(unlist(control)))]
datafile <- str_trim(str_replace(datafile,"\\$DATA" ,""))
datafile <- str_trim(str_replace(datafile,tolower(paste0(home_dir,"/data/sim_")),""))
datafile <- str_trim(str_replace(datafile,".csv IGNORE=@",""))
datafile <- str_split(datafile,"_")[[1]]
datafile
datafile <-  control[[1]][grep(tolower(paste0("DATA      ",home_dir)), tolower(unlist(control)))]
datafile
datafile <- str_trim(str_replace(datafile,"\\$DATA" ,""))
datafile
datafile <-  control[[1]][grep(tolower(paste0("DATA      ",home_dir)), tolower(unlist(control)))]
datafile <- tolower(datafile)
datafile <-  control[[1]][grep(tolower(paste0("DATA      ",home_dir)), tolower(unlist(control)))]
datafile <- tolower(datafile)
datafile <- str_trim(str_replace(datafile,"\\$data" ,""))
datafile
datafile <- str_trim(str_replace(datafile,"\\$data" ,""))
datafile <- str_trim(str_replace(datafile,tolower(paste0(home_dir,"/data/sim_")),""))
datafile
datafile <- str_trim(str_replace(datafile,tolower(paste0(home_dir,"/data/sim_")),""))
datafile <- str_trim(str_replace(datafile,".csv IGNORE=@",""))
datafile <- str_split(datafile,"_")[[1]]
datafile
datafile <- str_trim(str_replace(datafile,".csv ignore=@",""))
datafile <-  control[[1]][grep(tolower(paste0("DATA      ",home_dir)), tolower(unlist(control)))]
datafile <- tolower(datafile)
datafile <- str_trim(str_replace(datafile,"\\$data" ,""))
datafile <- str_trim(str_replace(datafile,tolower(paste0(home_dir,"/data/sim_")),""))
datafile <- str_trim(str_replace(datafile,".csv ignore=@",""))
datafile <- str_split(datafile,"_")[[1]]
datafile
curr_data_type <- c(as.character(this_comp),as.character(this_eta),as.character(this_vwt),as.character(this_gamma))
if(!(all(datafile==phenotype))){
message("NONMEN Phenotype not matched in ", datafile, " current model = ", curr_model)
s}
curr_data_type <- c(as.character(this_comp),as.character(this_eta),as.character(this_vwt),as.character(this_gamma))
if(!(all(datafile==phenotype))){
message("NONMEN Phenotype not matched in ", datafile, " current model = ", curr_model)
}
# same for NLME
control <- readtext::readtext(file.path(home_dir,"NLME",curr_model,paste0("Run",curr_model,".mmdl")),verbosity =0)$text
control <- str_split(control,"\n")
phenotype <- grep("## Genotype: ", unlist(control))
phenotype <- control[[1]][phenotype[[1]]]
phenotype <- str_trim(str_replace(phenotype,"## Genotype: \\[",""))
phenotype <- str_trim(str_replace(phenotype,"\\]",""))
phenotype <- str_split(phenotype,", ")[[1]]
phenotype
datafile <-  control[[1]][grep("##DATA ", unlist(control))]
datafile <- str_trim(str_replace(datafile,"##DATA",""))
datafile <- tolower(datafile)
datafile
datafile <-  control[[1]][grep("##DATA ", unlist(control))]
datafile <- str_trim(str_replace(datafile,"##DATA",""))
datafile <- tolower(datafile)
datafile <- str_trim(str_replace(datafile,tolower(paste0(home_dir,"/data/sim_")),""))
datafile <- str_trim(str_replace(datafile,".csv",""))
datafile <- str_split(datafile,"_")[[1]]
datafile
curr_model
home_dir
# same for NLME
control <- readtext::readtext(file.path(home_dir,"NLME",curr_model,paste0("Run",curr_model,".mmdl")),verbosity =0)$text
control <- str_split(control,"\n")
phenotype <- grep("## Genotype: ", unlist(control))
phenotype <- control[[1]][phenotype[[1]]]
phenotype <- str_trim(str_replace(phenotype,"## Genotype: \\[",""))
phenotype <- str_trim(str_replace(phenotype,"\\]",""))
