Model_num = Curr_model,
this_comp = this_comp,
this_eta = this_eta,
this_vwt = this_vwt,
this_gamma = this_gamma,
n_theta = NTHETA,
n_omega = NOMEGA,
Est_time = Est_time,
Cov_time = Cov_time,
Success = success,
Covar = Covar,
Iterations = iterations,
Algorithm = "NONMEM",
Good_inits = TRUE,
log_path = xml_file,
control_file = file.path(
home_dir,
"",
"NONMEM",
Curr_model,
paste0("Run", Curr_model, ".mod ")
),
data_set = data_file,
nparms = NTHETA + NOMEGA ,
messages = paste(messages, collapse = "-"),
TVVmax = TVVmax,
TVKM = TVKM,
TVV = TVV,
TVKA = TVKA,
CVVmax = CVVmax,
RMSE = RMSE,
MAE = MAE,
crash = FALSE
)
Results <- rbind(Results, This_Result)
write.csv(
Results,
file.path(home_dir, "NONMEMResults.csv"),
quote = FALSE,
row.names = FALSE
)
this_eta = 1
Curr_model <- Curr_model + 1
message(
"############ Starting model ",
Curr_model ,
" at ",
strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ,
" ############"
)
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE = -99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
setwd(wd)
filenameStem <- paste0("Run", Curr_model)
xml_file <- file.path(wd, paste0(filenameStem, ".xml"))
if (file.exists(xml_file)) {
file.remove(xml_file)
}
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste("cd",
wd,
"&&",
nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"))
StartTime <- Sys.time() # as.ITime(Sys.time())
rval <- system(command, timeout = 3600 * 6)
# can't tell if timeout or crashed??
if (file.exists(xml_file)) {
parms <- GetNMParms(xml_file)
data_file <- parms$dataFile
iterations <- parms$iterations
messages <- parms$messages
success <- parms$success
Covar <- parms$covar
NTHETA <- length(parms$theta)
if (rval != 124) {
# return code for timeout
Est_time <-  parms$EstTime
Cov_time <- parms$CovTime
} else{
Est_time <-  3600 * 6
Cov_time <- -999
}
TVVmax <- as.numeric(parms$theta[1])
TVKM <- as.numeric(parms$theta[2])
TVV <- as.numeric(parms$theta[3])
TVKA <- as.numeric(parms$theta[4])
CVVmax <- sqrt(parms$omega[1])
data <- read.table(
file.path(wd, "Run1Preds.dat"),
skip = 1,
header = TRUE
) %>%
filter(TIME > 0) %>%
mutate(IPRED = log(IPRED), DV = log(DV))
# log to get proportional
RMSE = rmse(data$DV, data$IPRED)
MAE = mae(data$DV, data$IPRED)
message(
"############ Estimation time for ",
wd ,
" = ",
Est_time,
" seconds ############"
)
} else{
Run_time <- 9999999
if (rval == 124) {
Est_time <- Cov_time <-  6 * 3600
} else{
Est_time <- (Sys.time() - StartTime)
Cov_time <-  -9999
}
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
message_char <- "-99999"
}
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"))
StartTime <- Sys.time() # as.ITime(Sys.time())
rval <- system(command, timeout = 3600 * 6)
setwd(home_dir)
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
"-rundir=",wd)
command
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
"-rundir=",wd)
wd
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
"-rundir=",wd)
rval <- system(command, timeout = 3600 * 6)
command
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=",wd))
command
rval <- system(command, timeout = 3600 * 6)
Curr_model <- 0
Start_model <- 0
nsamp <- 200
# set all models/data sets to initial values
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
message(
"############ Starting model ",
Curr_model ,
" at ",
strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ,
" ############"
)
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE = -99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
#setwd(wd)
filenameStem <- paste0("Run", Curr_model)
xml_file <- file.path(wd, paste0(filenameStem, ".xml"))
if (file.exists(xml_file)) {
file.remove(xml_file)
}
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=", wd))
#setwd(home_dir)
StartTime <- Sys.time() # as.ITime(Sys.time())
rval <- system(command, timeout = 3600 * 6)
this_eta = 1
Curr_model <- Curr_model + 1
message(
"############ Starting model ",
Curr_model ,
" at ",
strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ,
" ############"
)
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE = -99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
#setwd(wd)
filenameStem <- paste0("Run", Curr_model)
xml_file <- file.path(wd, paste0(filenameStem, ".xml"))
if (file.exists(xml_file)) {
file.remove(xml_file)
}
# below doesn't work in windows, must setwd()
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=", wd))
#setwd(home_dir)
StartTime <- Sys.time() # as.ITime(Sys.time())
rval <- system(command, timeout = 3600 * 6)
file.exists(xml_file)
parms <- GetNMParms(xml_file)
data_file <- parms$dataFile
iterations <- parms$iterations
messages <- parms$messages
success <- parms$success
Covar <- parms$covar
NTHETA <- length(parms$theta)
if (rval != 124) {
# return code for timeout
Est_time <-  parms$EstTime
Cov_time <- parms$CovTime
} else{
Est_time <-  3600 * 6
Cov_time <- -999
}
TVVmax <- as.numeric(parms$theta[1])
TVKM <- as.numeric(parms$theta[2])
TVV <- as.numeric(parms$theta[3])
TVKA <- as.numeric(parms$theta[4])
CVVmax <- sqrt(parms$omega[1])
data <- read.table(
file.path(wd, "Run1Preds.dat"),
skip = 1,
header = TRUE
) %>%
filter(TIME > 0) %>%
mutate(IPRED = log(IPRED), DV = log(DV))
# log to get proportional
RMSE = rmse(data$DV, data$IPRED)
MAE = mae(data$DV, data$IPRED)
message(
"############ Estimation time for ",
wd ,
" = ",
Est_time,
" seconds ############"
)
# can't tell if timeout or crashed??
if (file.exists(xml_file)) {
parms <- GetNMParms(xml_file)
data_file <- parms$dataFile
iterations <- parms$iterations
messages <- parms$messages
success <- parms$success
Covar <- parms$covar
NTHETA <- length(parms$theta)
if (rval != 124) {
# return code for timeout
Est_time <-  parms$EstTime
Cov_time <- parms$CovTime
} else{
Est_time <-  3600 * 6
Cov_time <- -999
}
TVVmax <- as.numeric(parms$theta[1])
TVKM <- as.numeric(parms$theta[2])
TVV <- as.numeric(parms$theta[3])
TVKA <- as.numeric(parms$theta[4])
CVVmax <- sqrt(parms$omega[1])
data <- read.table(
file.path(wd, "Run1Preds.dat"),
skip = 1,
header = TRUE
) %>%
filter(TIME > 0) %>%
mutate(IPRED = log(IPRED), DV = log(DV))
# log to get proportional
RMSE = rmse(data$DV, data$IPRED)
MAE = mae(data$DV, data$IPRED)
message(
"############ Estimation time for ",
wd ,
" = ",
Est_time,
" seconds ############"
)
} else{
Run_time <- 9999999
if (rval == 124) {
Est_time <- Cov_time <-  6 * 3600
} else{
Est_time <- (Sys.time() - StartTime)
Cov_time <-  -9999
}
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
message_char <- "-99999"
}
tryCatch({
message(
"############ Starting model ",
Curr_model ,
" at ",
strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ,
" ############"
)
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE = -99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
#setwd(wd)
filenameStem <- paste0("Run", Curr_model)
xml_file <- file.path(wd, paste0(filenameStem, ".xml"))
if (file.exists(xml_file)) {
file.remove(xml_file)
}
# below doesn't work in windows, changed to use rundir in nmfe command
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=", wd))
#setwd(home_dir)
StartTime <- Sys.time() # as.ITime(Sys.time())
rval <- system(command, timeout = 3600 * 6)
# can't tell if timeout or crashed??
if (file.exists(xml_file)) {
parms <- GetNMParms(xml_file)
data_file <- parms$dataFile
iterations <- parms$iterations
messages <- parms$messages
success <- parms$success
Covar <- parms$covar
NTHETA <- length(parms$theta)
if (rval != 124) {
# return code for timeout
Est_time <-  parms$EstTime
Cov_time <- parms$CovTime
} else{
Est_time <-  3600 * 6
Cov_time <- -999
}
TVVmax <- as.numeric(parms$theta[1])
TVKM <- as.numeric(parms$theta[2])
TVV <- as.numeric(parms$theta[3])
TVKA <- as.numeric(parms$theta[4])
CVVmax <- sqrt(parms$omega[1])
data <- read.table(
file.path(wd, "Run1Preds.dat"),
skip = 1,
header = TRUE
) %>%
filter(TIME > 0) %>%
mutate(IPRED = log(IPRED), DV = log(DV))
# log to get proportional
RMSE = rmse(data$DV, data$IPRED)
MAE = mae(data$DV, data$IPRED)
message(
"############ Estimation time for ",
wd ,
" = ",
Est_time,
" seconds ############"
)
} else{
Run_time <- 9999999
if (rval == 124) {
Est_time <- Cov_time <-  6 * 3600
} else{
Est_time <- (Sys.time() - StartTime)
Cov_time <-  -9999
}
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
message_char <- "-99999"
}
}, error = function(e) {
Run_time <- 9999999
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
if (rval == 124) {
message_char <- "timed out"
} else{
message_char <- "-99999"
}
})
source("C:/git/adpoBenchmark/CompileResultsNONMEM.R", echo=TRUE)
source("C:/git/adpoBenchmark/CompileResultsNONMEM.R", echo=TRUE)
home_dir
run_NONMEM(home_dir, nmfe_path)
home_dir
Sys.setenv("INSTALLDIR" = nlme_dirs[which_version])
which_version = "standard
"
nlme_dirs
Sys.setenv("INSTALLDIR" = nlme_dirs[which_version])
message("Starting NONMEM benchmarking")
# BAK files are just so we can look at intermediate results with locking the file
if (which_version == "ADPO") {
syngrads <- TRUE
outputfilename <-  "NLMEResults_ADPO.csv"
backupfilename <-  "NLMEResults_ADPOBAK.csv"
} else if (which_version == "NoHessian") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_NoHessian.csv"
backupfilename <-  "NLMEResults_NoHessianBAK.csv"
} else if (which_version == "standard") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_Standard.csv"
backupfilename <-  "NLMEResults_StandardBAK.csv"
}
ETANOMEGA <- c(1, 2, 3, 4, 3, 6) # no simple way to get n_omega from fit object
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
TVVmax = as.numeric(),
TVKM = as.numeric(),
TVV = as.numeric(),
TVKA = as.numeric(),
CVVmax = as.numeric(),
RMSE = as.numeric(),
MAE = as.numeric(),
crash = as.logical()
)
Curr_model <- 0
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
StartTime <- Sys.time()
runOk <- TRUE
# setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(
home_dir,
"NLME",
Curr_model,
paste0("Run", Curr_model, ".mmdl")
),
directoryToRun = file.path(home_dir, "NLME", Curr_model, paste0("Run", Curr_model)))
nlme_dirs
