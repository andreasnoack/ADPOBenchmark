Results,
file.path(home_dir, "NONMEMResults.csv"),
quote = FALSE,
row.names = FALSE
)
try({
file.copy(
file.path(home_dir, "NONMEMResults.csv"),
file.path(home_dir, "NONMEMResults_bak.csv")
)
})
}
message(
"############ Starting model ",
Curr_model ,
" at ",
strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ,
" ############"
)
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE = -99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
#setwd(wd)
filenameStem <- paste0("Run", Curr_model)
xml_file <- file.path(wd, paste0(filenameStem, ".xml"))
FMSG_file <- file.path(wd, "FMSG")
if (file.exists(xml_file))    file.remove(xml_file)
if (file.exists(FMSG_file))    file.remove(FMSG_file)
# below doesn't work in windows, changed to use rundir in nmfe command
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=", wd))
rm(list=ls())
## path to python.exe can be found with where python.exe command from DOS command line
#WindowspyDarwinInterpreter <- "C:/Users/msale/AppData/Local/Programs/Python/Python310/python.exe"
WindowspyDarwinInterpreter <- "C:/Python/Python311/python.exe"
Windowsnmfe_path <- "C:/nm74g64/util/nmfe74.bat"
WindowsINSTALLDIRADPO <- "D:/NLME_Engine_ADPO"
WindowsINSTALLDIRnoHessian <- "D:/NLME_Engine_noHessian"
Linuxnlme_dir <- "/home/user/InstallDirNLME/"
home_dir <- getwd()
# used by NLME
if (Sys.info()['sysname'] == "Linux") {
pyDarwinInterpreter <- "/home/user/venv/bin/python3"
nmfe_path <- "/opt/nm751/util/nmfe75"
gcc_dir <- dirname(system("which gcc", intern = TRUE))
# nlme_dir <- "/home/user/InstallDirNLME/"
if (grepl("Ubuntu", Sys.info()["version"])) {
Sys.setenv("PML_BIN_DIR" = "UBUNTU2204")
}
INSTALLDIRStandard <- Linuxnlme_dir
INSTALLDIRADPO <- "home/user/NLME_Engine_ADPO"
INSTALLDIRnoHessian <- "home/user/NLME_Engine_noHessian"
} else {
pyDarwinInterpreter <- WindowspyDarwinInterpreter
nmfe_path <- Windowsnmfe_path
# for Windows NLME engine
gcc_dir <- "C:\\Program Files\\Certara\\mingw64"
nlme_dir <- "C:\\Program Files\\Certara\\NLME_Engine"
INSTALLDIRStandard <- nlme_dir
INSTALLDIRADPO <- WindowsINSTALLDIRADPO
INSTALLDIRnoHessian <- WindowsINSTALLDIRnoHessian
}
nlme_dirs <- c(standard = INSTALLDIRStandard,
ADPO = INSTALLDIRADPO,
NoHessian = INSTALLDIRnoHessian)
library(R.utils)
library(Metrics)
library(ggplot2)
library(readr)
library(stringr)
library(dplyr)
library(data.table)
library(lubridate)
library(readtext)
library(Certara.RsNLME)
library(Certara.RDarwin)
library(xml2)
source(file.path(home_dir,"make_data.R"))
source(file.path(home_dir,"check_data.R"))
source(file.path(home_dir,"ReadNM_xml.R"))
source(file.path(home_dir,"CompileResultsNONMEM.R"))
source(file.path(home_dir,"CleanUp.R"))
source(file.path(home_dir,"CompileResultsNLME.R"))
source(file.path(home_dir,"GetTrueParms.R"))
source(file.path(home_dir,"RemoveNMfiles.R"))
# below doesn't work in windows, changed to use rundir in nmfe command
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=", wd))
working_dir <- file.path(home_dir, "NONMEM")
# run all models for time, reboot computer first
# define values for the models/data sets to be used
CompNTHETA <- c(0, 2, 4)
VWTNTHETA <- c(0, 1)
GAMMANTHETA <- c(0, 1)
ETANOMEGA <- c(1, 2, 3, 4, 3, 6)
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
TVVmax = as.numeric(),
TVKM = as.numeric(),
TVV = as.numeric(),
TVKA = as.numeric(),
CVVmax = as.numeric(),
RMSE = as.numeric(),
MAE = as.numeric(),
crash = as.logical()
)
Curr_model <- 0
Start_model <- 0
nsamp <- 200
# set all models/data sets to initial values
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
if (Curr_model >= Start_model) {
tryCatch({
message(
"############ Starting model ",
Curr_model ,
" at ",
strptime(Sys.time(), format = "%Y-%m-%d %H:%M") ,
" ############"
)
Est_time <- Cov_time <- iterations <-  messages <- -99999
Rval <- list(RMSE = -99, MAE = -99)
Covar <- success <- FALSE
wd <- file.path(working_dir, Curr_model)
#setwd(wd)
filenameStem <- paste0("Run", Curr_model)
xml_file <- file.path(wd, paste0(filenameStem, ".xml"))
FMSG_file <- file.path(wd, "FMSG")
if (file.exists(xml_file))    file.remove(xml_file)
if (file.exists(FMSG_file))    file.remove(FMSG_file)
# below doesn't work in windows, changed to use rundir in nmfe command
# command <- paste("cd",
#                  wd,
#                  "&&",
#                  nmfe_path,
#                  paste0(filenameStem, ".mod "),
#                  paste0(filenameStem, ".lst"))
command <- paste(nmfe_path,
paste0(filenameStem, ".mod "),
paste0(filenameStem, ".lst"),
paste0("-rundir=", wd))
#setwd(home_dir)
StartTime <- Sys.time() # as.ITime(Sys.time())
#rval <- system(command, timeout = time)
if(exists("rval")) rm(rval)
if(file.exists(xml_file)) file.remove(xml_file)
rval <- withTimeout(system(command, timeout = timeout), # 3600 * 6 for execution
substitute=TRUE,
envir=parent.frame(),
timeout = timeout + 60,
cpu=99999,
elapsed = timeout + 60, # 60 seconds for comppiling
onTimeout="warning")
if (file.exists(FMSG_file))    file.remove(FMSG_file)
# can't tell if timeout or crashed??
if (file.exists(xml_file) & !is.null(rval)) { # if timed out xml file is corrupted, rval is null
parms <- GetNMParms(xml_file)
data_file <- parms$dataFile
iterations <- parms$iterations
messages <- parms$messages
success <- parms$success
Covar <- parms$covar
NTHETA <- length(parms$theta)
if (rval != 124) {
# return code for timeout
Est_time <-  parms$EstTime
Cov_time <- parms$CovTime
} else{
Est_time <-  timeout
Cov_time <- -999
}
TVVmax <- as.numeric(parms$theta[1])
TVKM <- as.numeric(parms$theta[2])
TVV <- as.numeric(parms$theta[3])
TVKA <- as.numeric(parms$theta[4])
CVVmax <- sqrt(parms$omega[1])
data <- read.table(
file.path(wd, "Run1Preds.dat"),
skip = 1,
header = TRUE
) %>%
filter(TIME > 0) %>%
mutate(IPRED = log(IPRED), DV = log(DV))
# log to get proportional
RMSE = rmse(data$DV, data$IPRED)
MAE = mae(data$DV, data$IPRED)
message(
"############ Estimation time for ",
wd ,
" = ",
Est_time,
" seconds ############"
)
} else{
Run_time <- 9999999
if (!is.null(rval)){
if(rval == 124) {
Est_time <- Cov_time <-  timeout
} else{
Est_time <- Sys.time() - StartTime
Cov_time <-  -99999
}
}else{
message_char <- "timed out"
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
}
}
}, error = function(e) {
Run_time <- 9999999
converge <- Covar <- success <- finished <- FALSE
status <- iterations <- RMSE <- MAE <-   -99999
if (rval == 124) {
message_char <- "timed out"
} else{
message_char <- "-99999"
}
})
EndTime <- Sys.time()
CleanUp(wd)
NOMEGA <- ETANOMEGA[this_eta + 1]
This_Result = data.frame(
StartTime = as.character(StartTime),
EndTime = as.character(EndTime),
Model_num = Curr_model,
this_comp = this_comp,
this_eta = this_eta,
this_vwt = this_vwt,
this_gamma = this_gamma,
n_theta = NTHETA,
n_omega = NOMEGA,
Est_time = Est_time,
Cov_time = Cov_time,
Success = success,
Covar = Covar,
Iterations = iterations,
Algorithm = "NONMEM",
Good_inits = TRUE,
log_path = xml_file,
control_file = file.path(
home_dir,
"",
"NONMEM",
Curr_model,
paste0("Run", Curr_model, ".mod ")
),
data_set = data_file,
nparms = NTHETA + NOMEGA ,
messages = paste(messages, collapse = "-"),
TVVmax = TVVmax,
TVKM = TVKM,
TVV = TVV,
TVKA = TVKA,
CVVmax = CVVmax,
RMSE = RMSE,
MAE = MAE,
crash = FALSE
)
Results <- rbind(Results, This_Result)
write.csv(
Results,
file.path(home_dir, "NONMEMResults.csv"),
quote = FALSE,
row.names = FALSE
)
try({
file.copy(
file.path(home_dir, "NONMEMResults.csv"),
file.path(home_dir, "NONMEMResults_bak.csv")
)
})
}
which_version = "standard"
Sys.setenv("INSTALLDIR" = nlme_dirs[which_version])
message("Starting NONMEM benchmarking")
message("Starting NLME benchmarking")
# BAK files are just so we can look at intermediate results with locking the file
if (which_version == "ADPO") {
syngrads <- TRUE
outputfilename <-  "NLMEResults_ADPO.csv"
backupfilename <-  "NLMEResults_ADPOBAK.csv"
} else if (which_version == "NoHessian") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_NoHessian.csv"
backupfilename <-  "NLMEResults_NoHessianBAK.csv"
} else if (which_version == "standard") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_Standard.csv"
backupfilename <-  "NLMEResults_StandardBAK.csv"
}
ETANOMEGA <- c(1, 2, 3, 4, 3, 6) # no simple way to get n_omega from fit object
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
TVVmax = as.numeric(),
TVKM = as.numeric(),
TVV = as.numeric(),
TVKA = as.numeric(),
CVVmax = as.numeric(),
RMSE = as.numeric(),
MAE = as.numeric(),
crash = as.logical()
)
Curr_model <- 0
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
StartTime <- Sys.time()
runOk <- TRUE
# setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(
home_dir,
"NLME",
Curr_model,
paste0("Run", Curr_model, ".mmdl")
),
directoryToRun = file.path(home_dir, "NLME", Curr_model, paste0("Run", Curr_model)))
model_orig <- model_meta$model
message(
"############ Running ",
model_orig@modelInfo@workingDir,
" at ",
format(Sys.time(), format = "%F %R %Z") ,
" with ",
which_version,
" ############"
)
modelNum <- str_sub(rev(setdiff(
strsplit(model_orig@modelInfo@workingDir, "/|\\\\")[[1]],
""
))[1], start = 0)
if (file.exists(file.path(model_orig@modelInfo@workingDir, "err2.txt"))) {
file.remove(file.path(model_orig@modelInfo@workingDir, "err2.txt"))
}
if(exists("fit")) rm(fit)
if(file.exists(model_orig@modelInfo@workingDir)){
unlink(model_orig@modelInfo@workingDir, recursive = TRUE)
}
withTimeout(fit <- fitmodel(
model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
#  installationDirectory = installationDirectory,
runInBackground = FALSE
),
substitute=TRUE,
envir=parent.frame(),
timeout = timeout + 60,
cpu=99999,
elapsed = timeout + 60, # 60 seconds for compiling
onTimeout="warning")
source("D:/git/ADPOBenchmark/CleanUp.R", echo=TRUE)
model_orig@modelInfo@workingDir
wd <- model_orig@modelInfo@workingDir
# just the big stuff
files <- grep(
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
),
pattern = "Run[0-9].*",
invert = TRUE,
value = TRUE
)
files
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
)
grep(
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
),
pattern = "csv",
value = TRUE
)
wd
# just the big stuff
files <- grep(
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
),
pattern = "csv",
value = TRUE
)
files
file.remove(files)
file.remove(file.path(wd,"dmp.txt"))
file.remove(file.path(wd,"out.txt"))
i = 1
str_pad("1", 6, pad = "0")
str_pad("1", 2, pad = "0")
str_pad("11", 2, pad = "0")
str_pad(i, 2, pad = "0"))
str_pad(i, 2, pad = "0")
CleanUpNLME(file.path(home_dir, "NLME","run","0",str_pad(i, 2, pad = "0")))
file.path(home_dir, "NLME","run","0",str_pad(i, 2, pad = "0"))
wd = file.path(home_dir, "NLME","run","0",str_pad(i, 2, pad = "0"))
wd
# just the big stuff
# keep err? and .log file
files <- grep(
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
),
pattern = "csv",
value = TRUE
)
files
wd = file.path(home_dir, "NLME","run","0",str_pad(1, 2, pad = "0"))
wd = file.path(home_dir, "NLME","run","0",str_pad(2, 2, pad = "0"))
wd
# just the big stuff
# keep err? and .log file
files <- grep(
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
),
pattern = "csv",
value = TRUE
)
files
list.files(
path = wd,
full.names = TRUE,
recursive = TRUE
)
file.remove(files)
file.remove(file.path(wd,"dmp.txt"))
file.path(wd,"dmp.txt"))
file.path(wd,"dmp.txt")
if(file.exists(file.path(wd,"dmp.txt"))) file.remove(file.path(wd,"dmp.txt"))
if(file.exists(file.path(wd,"out.txt"))) file.remove(file.path(wd,"out.txt"))
source("D:/git/ADPOBenchmark/CleanUp.R", echo=TRUE)
# cleanup
for(i in 1:72){
CleanUpNLME(file.path(home_dir, "NLME","run","0",str_pad(i, 2, pad = "0")))
}
source("D:/git/ADPOBenchmark/CompileResultsNLME.R", echo=TRUE)
