install.packages("Certara.R")
library(Certara.R)
install_certara_packages()
check_certara_package_versions()
?NM_3D06_017
?loo::loo
?loo::relative_eff
which_version
which_version = "ADPO"
Sys.setenv("INSTALLDIR" = nlme_dirs[which_version])
nlme_dirs <- c(standard = INSTALLDIRStandard,
ADPO = INSTALLDIRADPO,
NoHessian = INSTALLDIRnoHessian)
## path to python.exe can be found with where python.exe command from DOS command line
#WindowspyDarwinInterpreter <- "C:/Users/msale/AppData/Local/Programs/Python/Python310/python.exe"
WindowspyDarwinInterpreter <- "C:/Python/Python311/python.exe"
Windowsnmfe_path <- "C:/nm74g64/util/nmfe74.bat"
WindowsINSTALLDIRADPO <- "D:/NLME_Engine_ADPO"
WindowsINSTALLDIRnoHessian <- "D:/NLME_Engine_noHessian"
Linuxnlme_dir <- "/home/user/InstallDirNLME/"
home_dir <- getwd()
# used by NLME
if (Sys.info()['sysname'] == "Linux") {
pyDarwinInterpreter <- "/home/user/venv/bin/python3"
nmfe_path <- "/opt/nm751/util/nmfe75"
gcc_dir <- dirname(system("which gcc", intern = TRUE))
# nlme_dir <- "/home/user/InstallDirNLME/"
if (grepl("Ubuntu", Sys.info()["version"])) {
Sys.setenv("PML_BIN_DIR" = "UBUNTU2204")
}
INSTALLDIRStandard <- Linuxnlme_dir
INSTALLDIRADPO <- "home/user/NLME_Engine_ADPO"
INSTALLDIRnoHessian <- "home/user/NLME_Engine_noHessian"
} else {
pyDarwinInterpreter <- WindowspyDarwinInterpreter
nmfe_path <- Windowsnmfe_path
# for Windows NLME engine
gcc_dir <- "C:\\Program Files\\Certara\\mingw64"
nlme_dir <- "C:\\Program Files\\Certara\\NLME_Engine"
INSTALLDIRStandard <- nlme_dir
INSTALLDIRADPO <- WindowsINSTALLDIRADPO
INSTALLDIRnoHessian <- WindowsINSTALLDIRnoHessian
}
nlme_dirs <- c(standard = INSTALLDIRStandard,
ADPO = INSTALLDIRADPO,
NoHessian = INSTALLDIRnoHessian)
library(R.utils)
library(Metrics)
library(ggplot2)
library(readr)
library(stringr)
library(dplyr)
library(data.table)
library(lubridate)
library(readtext)
library(Certara.RsNLME)
library(Certara.RDarwin)
library(xml2)
setwd("d:/git/adpobenchmark")
which_version
# BAK files are just so we can look at intermediate results with locking the file
if (which_version == "ADPO") {
syngrads <- TRUE
outputfilename <-  "NLMEResults_ADPO.csv"
backupfilename <-  "NLMEResults_ADPOBAK.csv"
} else if (which_version == "NoHessian") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_NoHessian.csv"
backupfilename <-  "NLMEResults_NoHessianBAK.csv"
} else if (which_version == "standard") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_Standard.csv"
backupfilename <-  "NLMEResults_StandardBAK.csv"
}
ETANOMEGA <- c(1, 2, 3, 4, 3, 6) # no simple way to get n_omega from fit object
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
TVVmax = as.numeric(),
TVKM = as.numeric(),
TVV = as.numeric(),
TVKA = as.numeric(),
CVVmax = as.numeric(),
RMSE = as.numeric(),
MAE = as.numeric(),
crash = as.logical()
)
Curr_model <- 0
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
StartTime <- Sys.time()
runOk <- TRUE
# setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(
home_dir,
"NLME",
Curr_model,
paste0("Run", Curr_model, ".mmdl")
),
directoryToRun = file.path(home_dir, "NLME", Curr_model, paste0("Run", Curr_model)))
home_dir <- getwd()
# setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(
home_dir,
"NLME",
Curr_model,
paste0("Run", Curr_model, ".mmdl")
),
directoryToRun = file.path(home_dir, "NLME", Curr_model, paste0("Run", Curr_model)))
syngrads <- FALSE
outputfilename <-  "NLMEResults_NoHessian.csv"
backupfilename <-  "NLMEResults_NoHessianBAK.csv"
which_version = "NoHessian"
Sys.setenv("INSTALLDIR" = nlme_dirs[which_version])
message("Starting NLME benchmarking")
# BAK files are just so we can look at intermediate results with locking the file
if (which_version == "ADPO") {
syngrads <- TRUE
outputfilename <-  "NLMEResults_ADPO.csv"
backupfilename <-  "NLMEResults_ADPOBAK.csv"
} else if (which_version == "NoHessian") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_NoHessian.csv"
backupfilename <-  "NLMEResults_NoHessianBAK.csv"
} else if (which_version == "standard") {
syngrads <- FALSE
outputfilename <-  "NLMEResults_Standard.csv"
backupfilename <-  "NLMEResults_StandardBAK.csv"
}
ETANOMEGA <- c(1, 2, 3, 4, 3, 6) # no simple way to get n_omega from fit object
Results <- data.frame(
StartTime = as.character(),
EndTime = as.character(),
ModelNum = as.integer(),
this_comp = as.integer(),
this_eta = as.integer(),
this_vwt = as.integer(),
this_gamma = as.integer(),
n_theta = as.integer(),
n_omega = as.integer(),
Est_time = as.numeric(),
Cov_time = as.numeric(),
Success = as.logical(),
Covar = as.logical(),
Iterations = as.integer(),
Algorithm = as.character(),
Good_inits = as.logical(),
log_path = as.character(),
control_file = as.character(),
data_set = as.character(),
nparms = as.integer(),
messages = as.integer(),
TVVmax = as.numeric(),
TVKM = as.numeric(),
TVV = as.numeric(),
TVKA = as.numeric(),
CVVmax = as.numeric(),
RMSE = as.numeric(),
MAE = as.numeric(),
crash = as.logical()
)
Curr_model <- 0
this_gamma <- this_vwt <- this_eta <- this_comp <- 0
Curr_model <- Curr_model + 1
StartTime <- Sys.time()
runOk <- TRUE
# setwd(file.path(home_dir,"nlme",Curr_model))
model_meta <- create_model_from_metamodel(file.path(
home_dir,
"NLME",
Curr_model,
paste0("Run", Curr_model, ".mmdl")
),
directoryToRun = file.path(home_dir, "NLME", Curr_model, paste0("Run", Curr_model)))
model_orig <- model_meta$model
message(
"############ Running ",
model_orig@modelInfo@workingDir,
" at ",
format(Sys.time(), format = "%F %R %Z") ,
" with ",
which_version,
" ############"
)
modelNum <- str_sub(rev(setdiff(
strsplit(model_orig@modelInfo@workingDir, "/|\\\\")[[1]],
""
))[1], start = 0)
if (file.exists(file.path(model_orig@modelInfo@workingDir, "err2.txt"))) {
file.remove(file.path(model_orig@modelInfo@workingDir, "err2.txt"))
}
if(exists("fit")) rm(fit)
if(file.exists(model_orig@modelInfo@workingDir)){
unlink(model_orig@modelInfo@workingDir, recursive = TRUE)
}
withTimeout(fit <- fitmodel(
model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
#  installationDirectory = installationDirectory,
runInBackground = FALSE
),
substitute=TRUE,
envir=parent.frame(),
timeout = timeout + 60,
cpu=99999,
elapsed = timeout + 60, # 60 seconds for compiling
onTimeout="warning")
timeout = 3000
withTimeout(fit <- fitmodel(
model_orig,
numIterations = 1000,
numCores = 1,
ODE = "DVERK",
sort = FALSE,
method = "FOCE-ELS",
workingDir = model_orig@modelInfo@workingDir,
stdErr = "Auto-Detect",
maxStepsODE = 100000,
allowSyntheticGradient = syngrads,
#  installationDirectory = installationDirectory,
runInBackground = FALSE
),
substitute=TRUE,
envir=parent.frame(),
timeout = timeout + 60,
cpu=99999,
elapsed = timeout + 60, # 60 seconds for compiling
onTimeout="warning")
