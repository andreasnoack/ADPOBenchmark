ps <- rbind(ps,data.frame(p = p))
cum_area <- cum_area + p/21
}
}
# check prob function
cum_area  <- 0
vals <- data.frame(i = as.numeric(), n = as.numeric())
ps <- data.frame(p = as.numeric())
i <- n <-  0
for(i in -100:100){ # 21 values, n obs = 441
for(n in -100:100){
vals <-  rbind(vals,data.frame(i = i/5, n = n/5))
p <- dmvnorm(x=c(i/50,n/50), mean=c(0,0)) #,sigma = cor)
ps <- rbind(ps,data.frame(p = p))
cum_area <- cum_area + p/201
}
}
library(ggplot2)
ggplot(ps,aes(x=1:441,y=p))+
geom_line()
ggplot(ps,aes(x=1:40401,y=p))+
geom_line()
# check prob function
cum_area  <- 0
vals <- data.frame(i = as.numeric(), n = as.numeric())
ps <- data.frame(p = as.numeric())
i <- n <-  0
for(i in -100:100){ # 21 values, n obs = 441
for(n in -100:100){
vals <-  rbind(vals,data.frame(i = i/25, n = n/25))
p <- dmvnorm(x=c(i/25,n/25), mean=c(0,0)) #,sigma = cor)
ps <- rbind(ps,data.frame(p = p))
cum_area <- cum_area + p/201
}
}
library(ggplot2)
ggplot(ps,aes(x=1:40401,y=p))+
geom_line()
sum(ps$p)
sqrt(sum(ps$p))
data <- cbind(vals,ps)
View(vals)
View(data)
ggplot(data,aes(x=i,y=n,z=p))+
geom_contour()
ggplot(data,aes(x=i,y=n,z=p))+
geom_tile()
plot_ly(
data, x= ~i, y= ~n, z= ~p,
type='mesh3d', intensity = ~z,
colors= colorRamp(rainbow(5))
)
install.packages(ploty)
install.packages("ploty")
library(plotly)
plot_ly(
data, x= ~i, y= ~n, z= ~p,
type='mesh3d', intensity = ~z,
colors= colorRamp(rainbow(5))
)
plot_ly(
data, x= ~i, y= ~n, z= ~p,
type='mesh3d',
colors= colorRamp(rainbow(5))
)
plot_ly(
data, x= ~i, y= ~n, z= ~p,
type='mesh3d',
colors= colorRamp(rainbow(1))
)
# check prob function
cum_area  <- 0
vals <- data.frame(i = as.numeric(), n = as.numeric())
ps <- data.frame(p = as.numeric())
i <- n <-  0
for(i in -100:100){ # 21 values, n obs = 441
for(n in -100:100){
vals <-  rbind(vals,data.frame(i = i/50, n = n/50))
p <- dmvnorm(x=c(i/50,n/50), mean=c(0,0)) #,sigma = cor)
ps <- rbind(ps,data.frame(p = p))
cum_area <- cum_area + p/201
}
}
data <- cbind(vals,ps)
library(plotly)
plot_ly(
data, x= ~i, y= ~n, z= ~p,
type='mesh3d',
colors= colorRamp(rainbow(1))
)
# box cox
library(ggplot2)
library(MASS)
dat <-  data.frame("Y"= runif(1000,0,3))
ggplot(dat,aes(x=Y))+geom_histogram()
dat <-  data.frame("Y"= exp(rnorm(1000,0,3)))
ggplot(dat,aes(x=Y))+geom_histogram()
?rnorm
library(mvtnorm)
?mvrnorm
dat <-  data.frame("Y"= exp(rnorm(1000,0,0.1)))
ggplot(dat,aes(x=Y))+geom_histogram()
dat <-  data.frame("Y"= exp(rnorm(1000,0,0.2)))
dat <-  data.frame("Y"= exp(rnorm(1000,log(100),0.2)))
ggplot(dat,aes(x=Y))+geom_histogram()
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.02,0.5),nrow = 3)
Sigma
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.05,0.5),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame("Y"= exp(mvrnorm(1000,mu,Sigma)
dat <-  data.frame("Y"= exp(mvrnorm(1000,mu,Sigma)))
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.05,0.5),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame("Y"= exp(mvrnorm(1000,mu,Sigma)))
ggplot(dat,aes(x=Y))+geom_histogram()
dat <-  exp(mvrnorm(1000,mu,Sigma))
View(dat)
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.4,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame(exp(mvrnorm(1000,mu,Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma)
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
library(MASS)
y = rf(500,30,30)
hist(y,breaks = 12)
?rf
result = boxcox(y~1, lambda = seq(-5,5,0.5))
mylambda = result$x[which.max(result$y)]
mylambda
y2 = (y^mylambda-1)/mylambda
hist(y2)
?boxcox
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
mylambda = result$x[which.max(LambaV$y)]
myLambda
mylambda
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <-  (dat$V^lambdaV-1)/lambdaV
hist(NormV)
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV
lambdaV
library(mvtnorm)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
ggplot(NormV,aes(x=V))+geom_histogram()
# and back to untransformed
NewV <- (NormV*lambdaV+1)^(1/lambdaV)
plot(V,NewV)
plot(dat$V,NewV)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
ggplot(NormV,aes(x=V))+geom_histogram()
# and back to untransformed
NewV <- (NormV*lambdaV+1)^(1/lambdaV)
plot(dat$V,NewV)
dat$V
NewV
View(dat)
orgV <- dat$V
plot(orgV,NewV)
plot(dat$V,NewV$V)
dat$V == newV$V
dat$V == NewV$V
View(dat)
View(NewV)
dat$V - NewV$V
any(abs(dat$V - NewV$V) > 0.0000001)
max(abs(dat$V - NewV$V))
# box cox
library(ggplot2)
library(MASS)
library(mvtnorm)
# orginal, from $COV??
mu <- c(1,10,20)
Sigma <- matrix(c(0.3,0.1,0.05,0.1,0.08,0.05,0.05,0.05,0.1),nrow = 3)
Sigma
det(Sigma) # positive definate?
dat <-  data.frame(exp(mvrnorm(1000,log(mu),Sigma)))
colnames(dat) <- c("V","CL","KA")
ggplot(dat,aes(x=V))+geom_histogram()
ggplot(dat,aes(x=CL))+geom_histogram()
ggplot(dat,aes(x=KA))+geom_histogram()
ggplot(dat,aes(x=CL,y=V))+geom_point()
shapiro.test(dat$V)
LambaV = boxcox(dat$V~1, lambda = seq(-5,5,0.5))
lambdaV = result$x[which.max(LambaV$y)]
lambdaV
NormV <- data.frame(V  = (dat$V^lambdaV-1)/lambdaV)
shapiro.test(NormV$V)
88*47
88*48
12*48
home_dir
home_dir <- "c:/git/dual_numbers/"
#
rm(list=ls())
library(dplyr)
library(readr)
library(tictoc)
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
home_dir <- "c:/git/dual_numbers"
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
destFile
nonmem_control
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_control
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
nlme_destination_dir
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
Curr_model
# copy .mod and .mmdl files
Curr_model <-  this_gamma <- this_vwt <-this_comp <- this_eta <- 0
for(this_gamma in 0:1){
for(this_vwt in 0:1){
for(this_comp in 0:2){
for(this_eta in 0:5){
Curr_model <- Curr_model + 1
nonmem_control <- file.path(home_dir,"pydarwin_nonmem","run","0",sprintf("%02d",Curr_model),paste0("nm_0_",sprintf("%02d",Curr_model),".mod"))
nonmem_destination_dir <- file.path(home_dir,"CompileResults","NONMEM",Curr_model)
destFile <- file.path(nonmem_destination_dir,paste0("Run",Curr_model,".mod"))
if(!file.exists(nonmem_destination_dir)) dir.create(nonmem_destination_dir)
file.copy(nonmem_control,destFile)
nlme_control <- file.path(home_dir,  "pydarwin_nlme", "run","0",sprintf("%02d",Curr_model),paste0("nlme_0_",sprintf("%02d",Curr_model),".mmdl"))
nlme_destination_dir <- file.path(home_dir,"CompileResults","NLME",Curr_model)
destFile <- file.path(nlme_destination_dir,paste0("Run",Curr_model,".mmdl"))
if(!file.exists(nlme_destination_dir)) dir.create(nlme_destination_dir)
file.copy(nlme_control,destFile)
}
}
}
}
toc()
SampleOFVs
setwd("c:/git/dual_numbers/comppileresults/nonmem")
setwd("c:/git/dual_numbers/compileresults/nonmem")
library(stringr)
setwd("c:/git/dual_numbers/compileresults/nonmem")
library(readr)
library(stringr)
setwd("c:/git/dual_numbers/compileresults/nonmem")
i = 1
control <- read_file(file.path(i,paste0("run",i,".mod")))
control
source("C:/git/Dual_numbers/CompileResults/fixPath.R", echo=TRUE)
control
control <- read_file(file.path(i,paste0("run",i,".mod")))
str_replace(control,"c:/git","d:/git")
write_file(control,file.path(i,paste0("run",i,".mod")))
for(i in 1:72){
control <- read_file(file.path(i,paste0("run",i,".mod")))
str_replace(control,"c:/git","d:/git")
write_file(control,file.path(i,paste0("run",i,".mod")))
}
i = 1
for(i in 1:72){
control <- read_file(file.path(i,paste0("run",i,".mod")))
control <- str_replace(control,"c:/git","d:/git")
write_file(control,file.path(i,paste0("run",i,".mod")))
}
i = 1
for(i in 1:72){
control <- read_file(file.path(i,paste0("run",i,".mod")))
control <- str_replace(control,"c:/git","d:/git")
write_file(control,file.path(i,paste0("run",i,".mod")))
}
setwd("c:/git/dual_numbers/compileresults/nlme")
i = 1
control <- read_file(file.path(i,paste0("run",i,".mmdl")))
control <- str_replace(control,"c:/git","d:/git")
write_file(control,file.path(i,paste0("run",i,".mmdl")))
rm(list=ls())
library(dplyr)
library(ggplot2)
library(ggplot2)
home_dir <- getwd()
# nlme has one extra THETA, for residual error
NLME_Std_all <- read.csv("NLMEStdResults.csv")%>%
mutate(n_theta = n_theta-1)
setwd('..')
# nlme has one extra THETA, for residual error
NLME_Std_all <- read.csv(file.path("NLme","NLMEStdResults.csv")%>%
NLME_Dual_all <- read.csv(file.path("NLme_dual","NLMEDualResults.csv")
NONMEM_all <- read.csv(file.path("NONMEM","NONMEMResults.csv")
NONMEM_all <- read.csv(file.path("NONMEM","NONMEMResults.csv"))
# sometime, if .rdata file save an certain time, model gets repeated??, so, only use first
NONMEM_all <- NONMEM_all %>%
distinct(Model_num,.keep_all = TRUE)
NLME_Std_times <- NLME_Std_all %>%
select(Model_num,Est_time,Cov_time) %>%
filter(Est_time > 0) %>%
filter(Cov_time > 0)
# nlme has one extra THETA, for residual error
NLME_Std_all <- read.csv(file.path("NLme","NLMEStdResults.csv"))
file.path("NLme","NLMEStdResults.csv")
# nlme has one extra THETA, for residual error
NLME_Std_all <- read.csv(file.path("NLme","NLMEResults.csv"))
NLME_Dual_all <- read.csv(file.path("NLme_dual","NLMEDualResults.csv"))
NLME_Std_times <- NLME_Std_all %>%
select(Model_num,Est_time,Cov_time) %>%
filter(Est_time > 0) %>%
filter(Cov_time > 0)
NLME_Dual_times <- NLME_Dual_all %>%
select(Model_num,Est_time,Cov_time) %>%
filter(Est_time > 0) %>%
filter(Cov_time > 0)
geoMeanNLMEStdEst  <- round(exp(mean(log(NLME_Std_times$Est_time))),1)
geoMeanNLMEStdCov  <- round(exp(mean(log(NLME_Std_times$Cov_time))),1)
geoMeanNLMEDualEst  <-round(exp(mean(log(NLME_Dual_times$Est_time))),1)
geoMeanNLMEDualCov  <- round(exp(mean(log(NLME_Dual_times$Cov_time))),1)
summary(NLME_Std_times)
summary(NLME_Dual_times)
# set with both NLME and NONMEM
times <- inner_join(x=NLME_Dual_times,y=inner_join(x=NONMEM_times, y=NLME_Std_times,by="Model_num") )
colnames(times) <- c("Model_Num","NLME_Dual_Est","NLME_Dual_Cov","NONMEM_Est","NONMEM_Cov","NLME_Std_Est","NLME_Std_Cov")
# set with both NLME and NONMEM
times <- inner_join(x=NLME_Dual_times, y=NLME_Std_times,by="Model_num")
Sum_times <- c("GMean_NONMEM_EST" = round(exp(mean(log(times$NONMEM_Est))),0),
"GMean_NLME_Std_EST" = round(exp(mean(log(times$NLME_Std_Est))),0),
"GMean_NLME_Dual_EST" = round(exp(mean(log(times$NLME_Dual_Est))),0),
"GMean_NLME_Dual_Cov" = round(exp(mean(log(times$NLME_Dual_Cov))),1)
)
# set with both NLME and NONMEM
times <- inner_join(x=NLME_Dual_times, y=NLME_Std_times,by="Model_num")
colnames(times) <- c("Model_Num","NLME_Dual_Est","NLME_Dual_Cov","NLME_Std_Est","NLME_Std_Cov")
Sum_times <- c("GMean_NONMEM_EST" = round(exp(mean(log(times$NONMEM_Est))),0),
"GMean_NLME_Std_EST" = round(exp(mean(log(times$NLME_Std_Est))),0),
"GMean_NLME_Dual_EST" = round(exp(mean(log(times$NLME_Dual_Est))),0),
"GMean_NLME_Dual_Cov" = round(exp(mean(log(times$NLME_Dual_Cov))),1)
)
Sum_times <- c("GMean_NLME_Std_EST" = round(exp(mean(log(times$NLME_Std_Est))),0),
"GMean_NLME_Dual_EST" = round(exp(mean(log(times$NLME_Dual_Est))),0),
"GMean_NLME_Std_Cov" = round(exp(mean(log(times$NLME_Std_Cov))),1),
"GMean_NLME_Dual_Cov" = round(exp(mean(log(times$NLME_Dual_Cov))),1)
)
Sum_times
ggplot(AllResults,
aes(x=n_theta,y=Est_time,color = Algorithm)) +
geom_point() +
geom_smooth(method='lm') +
scale_y_log10() +
xlab("Number of estimated THETA parameters")+
ylab("Estimation time (seconds)")
# GmeansEst <- c(NLME_std = exp(mean(log(NLME_Std_all %>% filter(Est_time > 0)))),
#                NLME_dual = exp(mean(log(NLME_Dual_all %>% filter(Est_time > 0)))),
#             NONMEM = exp(mean(log(NONMEM_all$Est_time%>% filter(Est_time > 0)))))
# # GmeansCov <- c(NLME = exp(mean(log(NLME_Standard$Cov_time))),
#                NLME = exp(mean(log(NONMEM$Cov_time))))
AllResults <- rbind(NLME_Dual_all,NLME_Std_all)
ggplot(AllResults,
aes(x=n_theta,y=Est_time,color = Algorithm)) +
geom_point() +
geom_smooth(method='lm') +
scale_y_log10() +
xlab("Number of estimated THETA parameters")+
ylab("Estimation time (seconds)")
View(AllResults)
AllResults <- allResults %>%
mutate(Nparms = n_omega+n_theta)
AllResults <- AllResults %>%
mutate(Nparms = n_omega+n_theta)
ggplot(AllResults,
aes(x=Nparms,y=Est_time,color = Algorithm)) +
geom_point() +
geom_smooth(method='lm') +
scale_y_log10() +
xlab("Number of estimated THETA parameters")+
ylab("Estimation time (seconds)")
ggplot(AllResults,
aes(x=Nparms,y=Est_time,color = Algorithm)) +
geom_point() +
geom_smooth(method='lm') +
scale_y_log10() +
xlab("Number of estimated parameters (ntheta+nomega")+
ylab("Estimation time (seconds)")
ggplot(AllResults,
aes(x=Nparms,y=Est_time,color = Algorithm)) +
geom_point() +
geom_smooth(method='lm') +
scale_y_log10() +
xlab("Number of estimated parameters (ntheta+nomega)")+
ylab("Estimation time (seconds)")
Sum_success
rm(list=ls())
library(dplyr)
library(ggplot2)
home_dir <- getwd()
NLME_Std_all <- read.csv(file.path("NLme","NLMEResults.csv"))
NLME_Dual_all <- read.csv(file.path("NLme_dual","NLMEDualResults.csv"))
NLME_Std_times <- NLME_Std_all %>%
select(Model_num,Est_time,Cov_time) %>%
filter(Est_time > 0) %>%
filter(Cov_time > 0)
NLME_Dual_times <- NLME_Dual_all %>%
select(Model_num,Est_time,Cov_time) %>%
filter(Est_time > 0) %>%
filter(Cov_time > 0)
geoMeanNLMEStdEst  <- round(exp(mean(log(NLME_Std_times$Est_time))),1)
geoMeanNLMEStdCov  <- round(exp(mean(log(NLME_Std_times$Cov_time))),1)
geoMeanNLMEDualEst  <-round(exp(mean(log(NLME_Dual_times$Est_time))),1)
geoMeanNLMEDualCov  <- round(exp(mean(log(NLME_Dual_times$Cov_time))),1)
summary(NLME_Std_times)
summary(NLME_Dual_times)
# set with both NLME and NONMEM
times <- inner_join(x=NLME_Dual_times, y=NLME_Std_times,by="Model_num")
colnames(times) <- c("Model_Num","NLME_Dual_Est","NLME_Dual_Cov","NLME_Std_Est","NLME_Std_Cov")
Sum_times <- c("GMean_NLME_Std_EST" = round(exp(mean(log(times$NLME_Std_Est))),0),
"GMean_NLME_Dual_EST" = round(exp(mean(log(times$NLME_Dual_Est))),0),
"GMean_NLME_Std_Cov" = round(exp(mean(log(times$NLME_Std_Cov))),1),
"GMean_NLME_Dual_Cov" = round(exp(mean(log(times$NLME_Dual_Cov))),1)
)
Sum_times
Sum_success <- c("FSuccess_NONMEM" = mean(NONMEM_all$Success),
"FSuccess_NLME_std" = mean(NLME_Std_all$Success),
"FSuccess_NLME_Dual" = mean(NLME_Dual_all$Success),
"FCov_NONMEM" = mean(NONMEM_all$Covar),
"FCov_NLME_std" = mean(NLME_Std_all$Covar),
"FCov_NLME_Dual" = mean(NLME_Dual_all$Covar))
Sum_success
Sum_success <- c("FSuccess_NLME_std" = mean(NLME_Std_all$Success),
"FSuccess_NLME_Dual" = mean(NLME_Dual_all$Success),
"FCov_NLME_std" = mean(NLME_Std_all$Covar),
"FCov_NLME_Dual" = mean(NLME_Dual_all$Covar))
Sum_success
